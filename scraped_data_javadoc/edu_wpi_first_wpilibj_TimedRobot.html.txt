Package
edu.wpi.first.wpilibj
Class TimedRobot
java.lang.Object
edu.wpi.first.wpilibj.RobotBase
edu.wpi.first.wpilibj.IterativeRobotBase
edu.wpi.first.wpilibj.TimedRobot
All Implemented Interfaces:
AutoCloseable
Direct Known Subclasses:
TimesliceRobot
public class
TimedRobot
extends
IterativeRobotBase
TimedRobot implements the IterativeRobotBase robot program framework.
The TimedRobot class is intended to be subclassed by a user creating a robot program.
periodic() functions from the base class are called on an interval by a Notifier instance.
Field Summary
Fields
Modifier and Type
Field
Description
static final double
kDefaultPeriod
Default loop period.
Constructor Summary
Constructors
Modifier
Constructor
Description
protected
TimedRobot
()
Constructor for TimedRobot.
protected
TimedRobot
(double period)
Constructor for TimedRobot.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
final void
addPeriodic
(
Runnable
callback,
 double periodSeconds)
Add a callback to run at a specific period.
final void
addPeriodic
(
Runnable
callback,
 double periodSeconds,
 double offsetSeconds)
Add a callback to run at a specific period with a starting time offset.
final void
addPeriodic
(
Runnable
callback,
Time
period)
Add a callback to run at a specific period.
final void
addPeriodic
(
Runnable
callback,
Time
period,
Time
offset)
Add a callback to run at a specific period with a starting time offset.
void
close
()
void
endCompetition
()
Ends the main loop in startCompetition().
long
getLoopStartTime
()
Return the system clock time in micrseconds for the start of the current periodic loop.
void
startCompetition
()
Provide an alternate "main loop" via startCompetition().
Methods inherited from class edu.wpi.first.wpilibj.
IterativeRobotBase
autonomousExit
,
autonomousInit
,
autonomousPeriodic
,
disabledExit
,
disabledInit
,
disabledPeriodic
,
driverStationConnected
,
enableLiveWindowInTest
,
getPeriod
,
isLiveWindowEnabledInTest
,
loopFunc
,
printWatchdogEpochs
,
robotInit
,
robotPeriodic
,
setNetworkTablesFlushEnabled
,
simulationInit
,
simulationPeriodic
,
teleopExit
,
teleopInit
,
teleopPeriodic
,
testExit
,
testInit
,
testPeriodic
Methods inherited from class edu.wpi.first.wpilibj.
RobotBase
getMainThreadId
,
getRuntimeType
,
isAutonomous
,
isAutonomousEnabled
,
isDisabled
,
isEnabled
,
isReal
,
isSimulation
,
isTeleop
,
isTeleopEnabled
,
isTest
,
isTestEnabled
,
startRobot
,
suppressExitWarning
Methods inherited from class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Field Details
kDefaultPeriod
public static final
double
kDefaultPeriod
Default loop period.
See Also:
Constant Field Values
Constructor Details
TimedRobot
protected
TimedRobot
()
Constructor for TimedRobot.
TimedRobot
protected
TimedRobot
(double period)
Constructor for TimedRobot.
Parameters:
period
- Period in seconds.
Method Details
close
public
void
close
()
Specified by:
close
in interface
AutoCloseable
Overrides:
close
in class
RobotBase
startCompetition
public
void
startCompetition
()
Provide an alternate "main loop" via startCompetition().
Specified by:
startCompetition
in class
IterativeRobotBase
endCompetition
public
void
endCompetition
()
Ends the main loop in startCompetition().
Specified by:
endCompetition
in class
RobotBase
getLoopStartTime
public
long
getLoopStartTime
()
Return the system clock time in micrseconds for the start of the current periodic loop. This is
 in the same time base as Timer.getFPGATimestamp(), but is stable through a loop. It is updated
 at the beginning of every periodic callback (including the normal periodic loop).
Returns:
Robot running time in microseconds, as of the start of the current periodic function.
addPeriodic
public final
void
addPeriodic
(
Runnable
callback,
 double periodSeconds)
Add a callback to run at a specific period.
This is scheduled on TimedRobot's Notifier, so TimedRobot and the callback run
 synchronously. Interactions between them are thread-safe.
Parameters:
callback
- The callback to run.
periodSeconds
- The period at which to run the callback in seconds.
addPeriodic
public final
void
addPeriodic
(
Runnable
callback,
 double periodSeconds,
 double offsetSeconds)
Add a callback to run at a specific period with a starting time offset.
This is scheduled on TimedRobot's Notifier, so TimedRobot and the callback run
 synchronously. Interactions between them are thread-safe.
Parameters:
callback
- The callback to run.
periodSeconds
- The period at which to run the callback in seconds.
offsetSeconds
- The offset from the common starting time in seconds. This is useful for
     scheduling a callback in a different timeslot relative to TimedRobot.
addPeriodic
public final
void
addPeriodic
(
Runnable
callback,
Time
period)
Add a callback to run at a specific period.
This is scheduled on TimedRobot's Notifier, so TimedRobot and the callback run
 synchronously. Interactions between them are thread-safe.
Parameters:
callback
- The callback to run.
period
- The period at which to run the callback.
addPeriodic
public final
void
addPeriodic
(
Runnable
callback,
Time
period,
Time
offset)
Add a callback to run at a specific period with a starting time offset.
This is scheduled on TimedRobot's Notifier, so TimedRobot and the callback run
 synchronously. Interactions between them are thread-safe.
Parameters:
callback
- The callback to run.
period
- The period at which to run the callback.
offset
- The offset from the common starting time. This is useful for scheduling a
     callback in a different timeslot relative to TimedRobot.