Package
edu.wpi.first.wpilibj
Class Counter
java.lang.Object
edu.wpi.first.wpilibj.Counter
All Implemented Interfaces:
Sendable
,
CounterBase
,
AutoCloseable
public class
Counter
extends
Object
implements
CounterBase
,
Sendable
,
AutoCloseable
Class for counting the number of ticks on a digital input channel.
This is a general purpose class for counting repetitive events. It can return the number of
 counts, the period of the most recent cycle, and detect when the signal being counted has stopped
 by supplying a maximum cycle time.
All counters will immediately start counting - reset() them if you need them to be zeroed
 before use.
Nested Class Summary
Nested Classes
Modifier and Type
Class
Description
static enum
Counter.Mode
Mode determines how and what the counter counts.
Nested classes/interfaces inherited from interface edu.wpi.first.wpilibj.
CounterBase
CounterBase.EncodingType
Field Summary
Fields
Modifier and Type
Field
Description
protected
DigitalSource
m_downSource
What makes the counter count down.
protected
DigitalSource
m_upSource
What makes the counter count up.
Constructor Summary
Constructors
Constructor
Description
Counter
()
Create an instance of a counter where no sources are selected.
Counter
(int channel)
Create an instance of a Counter object.
Counter
(
AnalogTrigger
trigger)
Create an instance of a Counter object.
Counter
(
Counter.Mode
mode)
Create an instance of a counter with the given mode.
Counter
(
CounterBase.EncodingType
encodingType,
DigitalSource
upSource,
DigitalSource
downSource,
 boolean inverted)
Create an instance of a Counter object.
Counter
(
DigitalSource
source)
Create an instance of a counter from a Digital Input.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
void
clearDownSource
()
Disable the down counting source to the counter.
void
clearUpSource
()
Disable the up counting source to the counter.
void
close
()
int
get
()
Read the current counter value.
boolean
getDirection
()
The last direction the counter value changed.
double
getDistance
()
Read the current scaled counter value.
int
getFPGAIndex
()
The counter's FPGA index.
double
getPeriod
()
Get the Period of the most recent count.
double
getRate
()
Get the current rate of the Counter.
int
getSamplesToAverage
()
Get the Samples to Average which specifies the number of samples of the timer to average when
 calculating the period.
boolean
getStopped
()
Determine if the clock is stopped.
void
initSendable
(
SendableBuilder
builder)
Initializes this
Sendable
object.
void
reset
()
Reset the Counter to zero.
void
setDistancePerPulse
(double distancePerPulse)
Set the distance per pulse for this counter.
void
setDownSource
(int channel)
Set the down counting source to be a digital input channel.
void
setDownSource
(
AnalogTrigger
analogTrigger,
AnalogTriggerOutput.AnalogTriggerType
triggerType)
Set the down counting source to be an analog trigger.
void
setDownSource
(
DigitalSource
source)
Set the source object that causes the counter to count down.
void
setDownSourceEdge
(boolean risingEdge,
 boolean fallingEdge)
Set the edge sensitivity on a down counting source.
void
setExternalDirectionMode
()
Set external direction mode on this counter.
final void
setMaxPeriod
(double maxPeriod)
Set the maximum period where the device is still considered "moving".
void
setPulseLengthMode
(double threshold)
Configure the counter to count in up or down based on the length of the input pulse.
void
setReverseDirection
(boolean reverseDirection)
Set the Counter to return reversed sensing on the direction.
void
setSamplesToAverage
(int samplesToAverage)
Set the Samples to Average which specifies the number of samples of the timer to average when
 calculating the period.
void
setSemiPeriodMode
(boolean highSemiPeriod)
Set Semi-period mode on this counter.
void
setUpdateWhenEmpty
(boolean enabled)
Select whether you want to continue updating the event timer output when there are no samples
 captured.
void
setUpDownCounterMode
()
Set standard up / down counting mode on this counter.
final void
setUpSource
(int channel)
Set the up source for the counter as a digital input channel.
void
setUpSource
(
AnalogTrigger
analogTrigger,
AnalogTriggerOutput.AnalogTriggerType
triggerType)
Set the up counting source to be an analog trigger.
void
setUpSource
(
DigitalSource
source)
Set the source object that causes the counter to count up.
void
setUpSourceEdge
(boolean risingEdge,
 boolean fallingEdge)
Set the edge sensitivity on an up counting source.
Methods inherited from class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Field Details
m_upSource
protected
DigitalSource
m_upSource
What makes the counter count up.
m_downSource
protected
DigitalSource
m_downSource
What makes the counter count down.
Constructor Details
Counter
public
Counter
(
Counter.Mode
mode)
Create an instance of a counter with the given mode.
Parameters:
mode
- The counter mode.
Counter
public
Counter
()
Create an instance of a counter where no sources are selected. Then they all must be selected
 by calling functions to specify the up source and the down source independently.
The counter will start counting immediately.
Counter
public
Counter
(
DigitalSource
source)
Create an instance of a counter from a Digital Input. This is used if an existing digital input
 is to be shared by multiple other objects such as encoders or if the Digital Source is not a
 DIO channel (such as an Analog Trigger)
The counter will start counting immediately.
Parameters:
source
- the digital source to count
Counter
public
Counter
(int channel)
Create an instance of a Counter object. Create an up-Counter instance given a channel.
The counter will start counting immediately.
Parameters:
channel
- the DIO channel to use as the up source. 0-9 are on-board, 10-25 are on the MXP
Counter
public
Counter
(
CounterBase.EncodingType
encodingType,
DigitalSource
upSource,
DigitalSource
downSource,
 boolean inverted)
Create an instance of a Counter object. Create an instance of a simple up-Counter given an
 analog trigger. Use the trigger state output from the analog trigger.
The counter will start counting immediately.
Parameters:
encodingType
- which edges to count
upSource
- first source to count
downSource
- second source for direction
inverted
- true to invert the count
Counter
public
Counter
(
AnalogTrigger
trigger)
Create an instance of a Counter object. Create an instance of a simple up-Counter given an
 analog trigger. Use the trigger state output from the analog trigger.
The counter will start counting immediately.
Parameters:
trigger
- the analog trigger to count
Method Details
close
public
void
close
()
Specified by:
close
in interface
AutoCloseable
getFPGAIndex
public
int
getFPGAIndex
()
The counter's FPGA index.
Returns:
the Counter's FPGA index
setUpSource
public final
void
setUpSource
(int channel)
Set the up source for the counter as a digital input channel.
Parameters:
channel
- the DIO channel to count 0-9 are on-board, 10-25 are on the MXP
setUpSource
public
void
setUpSource
(
DigitalSource
source)
Set the source object that causes the counter to count up. Set the up counting DigitalSource.
Parameters:
source
- the digital source to count
setUpSource
public
void
setUpSource
(
AnalogTrigger
analogTrigger,
AnalogTriggerOutput.AnalogTriggerType
triggerType)
Set the up counting source to be an analog trigger.
Parameters:
analogTrigger
- The analog trigger object that is used for the Up Source
triggerType
- The analog trigger output that will trigger the counter.
setUpSourceEdge
public
void
setUpSourceEdge
(boolean risingEdge,
 boolean fallingEdge)
Set the edge sensitivity on an up counting source. Set the up source to either detect rising
 edges or falling edges.
Parameters:
risingEdge
- true to count rising edge
fallingEdge
- true to count falling edge
clearUpSource
public
void
clearUpSource
()
Disable the up counting source to the counter.
setDownSource
public
void
setDownSource
(int channel)
Set the down counting source to be a digital input channel.
Parameters:
channel
- the DIO channel to count 0-9 are on-board, 10-25 are on the MXP
setDownSource
public
void
setDownSource
(
DigitalSource
source)
Set the source object that causes the counter to count down. Set the down counting
 DigitalSource.
Parameters:
source
- the digital source to count
setDownSource
public
void
setDownSource
(
AnalogTrigger
analogTrigger,
AnalogTriggerOutput.AnalogTriggerType
triggerType)
Set the down counting source to be an analog trigger.
Parameters:
analogTrigger
- The analog trigger object that is used for the Down Source
triggerType
- The analog trigger output that will trigger the counter.
setDownSourceEdge
public
void
setDownSourceEdge
(boolean risingEdge,
 boolean fallingEdge)
Set the edge sensitivity on a down counting source. Set the down source to either detect rising
 edges or falling edges.
Parameters:
risingEdge
- true to count the rising edge
fallingEdge
- true to count the falling edge
clearDownSource
public
void
clearDownSource
()
Disable the down counting source to the counter.
setUpDownCounterMode
public
void
setUpDownCounterMode
()
Set standard up / down counting mode on this counter. Up and down counts are sourced
 independently from two inputs.
setExternalDirectionMode
public
void
setExternalDirectionMode
()
Set external direction mode on this counter. Counts are sourced on the Up counter input. The
 Down counter input represents the direction to count.
setSemiPeriodMode
public
void
setSemiPeriodMode
(boolean highSemiPeriod)
Set Semi-period mode on this counter. Counts up on both rising and falling edges.
Parameters:
highSemiPeriod
- true to count up on both rising and falling
setPulseLengthMode
public
void
setPulseLengthMode
(double threshold)
Configure the counter to count in up or down based on the length of the input pulse. This mode
 is most useful for direction sensitive gear tooth sensors.
Parameters:
threshold
- The pulse length beyond which the counter counts the opposite direction. Units
     are seconds.
get
public
int
get
()
Read the current counter value. Read the value at this instant. It may still be running, so it
 reflects the current value. Next time it is read, it might have a different value.
Specified by:
get
in interface
CounterBase
Returns:
the count
getDistance
public
double
getDistance
()
Read the current scaled counter value. Read the value at this instant, scaled by the distance
 per pulse (defaults to 1).
Returns:
The distance since the last reset
reset
public
void
reset
()
Reset the Counter to zero. Set the counter value to zero. This doesn't affect the running state
 of the counter, just sets the current value to zero.
Specified by:
reset
in interface
CounterBase
setMaxPeriod
public final
void
setMaxPeriod
(double maxPeriod)
Set the maximum period where the device is still considered "moving". Sets the maximum period
 where the device is considered moving. This value is used to determine the "stopped" state of
 the counter using the GetStopped method.
Specified by:
setMaxPeriod
in interface
CounterBase
Parameters:
maxPeriod
- The maximum period where the counted device is considered moving in seconds.
setUpdateWhenEmpty
public
void
setUpdateWhenEmpty
(boolean enabled)
Select whether you want to continue updating the event timer output when there are no samples
 captured. The output of the event timer has a buffer of periods that are averaged and posted to
 a register on the FPGA. When the timer detects that the event source has stopped (based on the
 MaxPeriod) the buffer of samples to be averaged is emptied. If you enable the update when
 empty, you will be notified of the stopped source and the event time will report 0 samples. If
 you disable update when empty, the most recent average will remain on the output until a new
 sample is acquired. You will never see 0 samples output (except when there have been no events
 since an FPGA reset) and you will likely not see the stopped bit become true (since it is
 updated at the end of an average and there are no samples to average).
Parameters:
enabled
- true to continue updating
getStopped
public
boolean
getStopped
()
Determine if the clock is stopped. Determine if the clocked input is stopped based on the
 MaxPeriod value set using the SetMaxPeriod method. If the clock exceeds the MaxPeriod, then the
 device (and counter) are assumed to be stopped and the method will return true.
Specified by:
getStopped
in interface
CounterBase
Returns:
true if the most recent counter period exceeds the MaxPeriod value set by SetMaxPeriod.
getDirection
public
boolean
getDirection
()
The last direction the counter value changed.
Specified by:
getDirection
in interface
CounterBase
Returns:
The last direction the counter value changed.
setReverseDirection
public
void
setReverseDirection
(boolean reverseDirection)
Set the Counter to return reversed sensing on the direction. This allows counters to change the
 direction they are counting in the case of 1X and 2X quadrature encoding only. Any other
 counter mode isn't supported.
Parameters:
reverseDirection
- true if the value counted should be negated.
getPeriod
public
double
getPeriod
()
Get the Period of the most recent count. Returns the time interval of the most recent count.
 This can be used for velocity calculations to determine shaft speed.
Specified by:
getPeriod
in interface
CounterBase
Returns:
The period of the last two pulses in units of seconds.
getRate
public
double
getRate
()
Get the current rate of the Counter. Read the current rate of the counter accounting for the
 distance per pulse value. The default value for distance per pulse (1) yields units of pulses
 per second.
Returns:
The rate in units/sec
setSamplesToAverage
public
void
setSamplesToAverage
(int samplesToAverage)
Set the Samples to Average which specifies the number of samples of the timer to average when
 calculating the period. Perform averaging to account for mechanical imperfections or as
 oversampling to increase resolution.
Parameters:
samplesToAverage
- The number of samples to average from 1 to 127.
getSamplesToAverage
public
int
getSamplesToAverage
()
Get the Samples to Average which specifies the number of samples of the timer to average when
 calculating the period. Perform averaging to account for mechanical imperfections or as
 oversampling to increase resolution.
Returns:
SamplesToAverage The number of samples being averaged (from 1 to 127)
setDistancePerPulse
public
void
setDistancePerPulse
(double distancePerPulse)
Set the distance per pulse for this counter. This sets the multiplier used to determine the
 distance driven based on the count value from the encoder. Set this value based on the Pulses
 per Revolution and factor in any gearing reductions. This distance can be in any units you
 like, linear or angular.
Parameters:
distancePerPulse
- The scale factor that will be used to convert pulses to useful units.
initSendable
public
void
initSendable
(
SendableBuilder
builder)
Description copied from interface:
Sendable
Initializes this
Sendable
object.
Specified by:
initSendable
in interface
Sendable
Parameters:
builder
- sendable builder