Package
edu.wpi.first.math.estimator
Class DifferentialDrivePoseEstimator
java.lang.Object
edu.wpi.first.math.estimator.PoseEstimator
<
DifferentialDriveWheelPositions
>
edu.wpi.first.math.estimator.DifferentialDrivePoseEstimator
public class
DifferentialDrivePoseEstimator
extends
PoseEstimator
<
DifferentialDriveWheelPositions
>
This class wraps
Differential Drive Odometry
to fuse
 latency-compensated vision measurements with differential drive encoder measurements. It is
 intended to be a drop-in replacement for
DifferentialDriveOdometry
; in fact, if you never
 call
PoseEstimator.addVisionMeasurement(edu.wpi.first.math.geometry.Pose2d, double)
and only call
update(edu.wpi.first.math.geometry.Rotation2d, double, double)
then this will behave exactly the same as
 DifferentialDriveOdometry.
update(edu.wpi.first.math.geometry.Rotation2d, double, double)
should be called every robot loop.
PoseEstimator.addVisionMeasurement(edu.wpi.first.math.geometry.Pose2d, double)
can be called as infrequently as
 you want; if you never call it then this class will behave exactly like regular encoder odometry.
Constructor Summary
Constructors
Constructor
Description
DifferentialDrivePoseEstimator
(
DifferentialDriveKinematics
kinematics,
Rotation2d
gyroAngle,
 double leftDistanceMeters,
 double rightDistanceMeters,
Pose2d
initialPoseMeters)
Constructs a DifferentialDrivePoseEstimator with default standard deviations for the model and
 vision measurements.
DifferentialDrivePoseEstimator
(
DifferentialDriveKinematics
kinematics,
Rotation2d
gyroAngle,
 double leftDistanceMeters,
 double rightDistanceMeters,
Pose2d
initialPoseMeters,
Matrix
<
N3
,
N1
> stateStdDevs,
Matrix
<
N3
,
N1
> visionMeasurementStdDevs)
Constructs a DifferentialDrivePoseEstimator.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
void
resetPosition
(
Rotation2d
gyroAngle,
 double leftPositionMeters,
 double rightPositionMeters,
Pose2d
poseMeters)
Resets the robot's position on the field.
Pose2d
update
(
Rotation2d
gyroAngle,
 double distanceLeftMeters,
 double distanceRightMeters)
Updates the pose estimator with wheel encoder and gyro information.
Pose2d
updateWithTime
(double currentTimeSeconds,
Rotation2d
gyroAngle,
 double distanceLeftMeters,
 double distanceRightMeters)
Updates the pose estimator with wheel encoder and gyro information.
Methods inherited from class edu.wpi.first.math.estimator.
PoseEstimator
addVisionMeasurement
,
addVisionMeasurement
,
getEstimatedPosition
,
resetPose
,
resetPosition
,
resetRotation
,
resetTranslation
,
sampleAt
,
setVisionMeasurementStdDevs
,
update
,
updateWithTime
Methods inherited from class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
DifferentialDrivePoseEstimator
public
DifferentialDrivePoseEstimator
(
DifferentialDriveKinematics
kinematics,
Rotation2d
gyroAngle,
 double leftDistanceMeters,
 double rightDistanceMeters,
Pose2d
initialPoseMeters)
Constructs a DifferentialDrivePoseEstimator with default standard deviations for the model and
 vision measurements.
The default standard deviations of the model states are 0.02 meters for x, 0.02 meters for
 y, and 0.01 radians for heading. The default standard deviations of the vision measurements are
 0.1 meters for x, 0.1 meters for y, and 0.1 radians for heading.
Parameters:
kinematics
- A correctly-configured kinematics object for your drivetrain.
gyroAngle
- The current gyro angle.
leftDistanceMeters
- The distance traveled by the left encoder.
rightDistanceMeters
- The distance traveled by the right encoder.
initialPoseMeters
- The starting pose estimate.
DifferentialDrivePoseEstimator
public
DifferentialDrivePoseEstimator
(
DifferentialDriveKinematics
kinematics,
Rotation2d
gyroAngle,
 double leftDistanceMeters,
 double rightDistanceMeters,
Pose2d
initialPoseMeters,
Matrix
<
N3
,
N1
> stateStdDevs,
Matrix
<
N3
,
N1
> visionMeasurementStdDevs)
Constructs a DifferentialDrivePoseEstimator.
Parameters:
kinematics
- A correctly-configured kinematics object for your drivetrain.
gyroAngle
- The gyro angle of the robot.
leftDistanceMeters
- The distance traveled by the left encoder.
rightDistanceMeters
- The distance traveled by the right encoder.
initialPoseMeters
- The estimated initial pose.
stateStdDevs
- Standard deviations of the pose estimate (x position in meters, y position
     in meters, and heading in radians). Increase these numbers to trust your state estimate
     less.
visionMeasurementStdDevs
- Standard deviations of the vision pose measurement (x position
     in meters, y position in meters, and heading in radians). Increase these numbers to trust
     the vision pose measurement less.
Method Details
resetPosition
public
void
resetPosition
(
Rotation2d
gyroAngle,
 double leftPositionMeters,
 double rightPositionMeters,
Pose2d
poseMeters)
Resets the robot's position on the field.
The gyroscope angle does not need to be reset here on the user's robot code. The library
 automatically takes care of offsetting the gyro angle.
Parameters:
gyroAngle
- The angle reported by the gyroscope.
leftPositionMeters
- The distance traveled by the left encoder.
rightPositionMeters
- The distance traveled by the right encoder.
poseMeters
- The position on the field that your robot is at.
update
public
Pose2d
update
(
Rotation2d
gyroAngle,
 double distanceLeftMeters,
 double distanceRightMeters)
Updates the pose estimator with wheel encoder and gyro information. This should be called every
 loop.
Parameters:
gyroAngle
- The current gyro angle.
distanceLeftMeters
- The total distance travelled by the left wheel in meters.
distanceRightMeters
- The total distance travelled by the right wheel in meters.
Returns:
The estimated pose of the robot in meters.
updateWithTime
public
Pose2d
updateWithTime
(double currentTimeSeconds,
Rotation2d
gyroAngle,
 double distanceLeftMeters,
 double distanceRightMeters)
Updates the pose estimator with wheel encoder and gyro information. This should be called every
 loop.
Parameters:
currentTimeSeconds
- Time at which this method was called, in seconds.
gyroAngle
- The current gyro angle.
distanceLeftMeters
- The total distance travelled by the left wheel in meters.
distanceRightMeters
- The total distance travelled by the right wheel in meters.
Returns:
The estimated pose of the robot in meters.