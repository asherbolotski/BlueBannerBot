Package
edu.wpi.first.wpilibj.simulation
Class I2CSim
java.lang.Object
edu.wpi.first.wpilibj.simulation.I2CSim
public class
I2CSim
extends
Object
A class to control a simulated I2C device.
Constructor Summary
Constructors
Constructor
Description
I2CSim
(int index)
Construct a new I2C simulation object.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
boolean
getInitialized
()
Check whether this I2C device has been initialized.
CallbackStore
registerInitializedCallback
(
NotifyCallback
callback,
 boolean initialNotify)
Register a callback to be run when this I2C device is initialized.
CallbackStore
registerReadCallback
(
BufferCallback
callback)
Register a callback to be run whenever a `read` operation is done.
CallbackStore
registerWriteCallback
(
ConstBufferCallback
callback)
Register a callback to be run whenever a `write` operation is done.
void
resetData
()
Reset all I2C simulation data.
void
setInitialized
(boolean initialized)
Define whether this I2C device has been initialized.
Methods inherited from class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
I2CSim
public
I2CSim
(int index)
Construct a new I2C simulation object.
Parameters:
index
- the HAL index of the I2C object
Method Details
registerInitializedCallback
public
CallbackStore
registerInitializedCallback
(
NotifyCallback
callback,
 boolean initialNotify)
Register a callback to be run when this I2C device is initialized.
Parameters:
callback
- the callback
initialNotify
- whether to run the callback with the initial state
Returns:
the
CallbackStore
object associated with this callback.
getInitialized
public
boolean
getInitialized
()
Check whether this I2C device has been initialized.
Returns:
true if initialized
setInitialized
public
void
setInitialized
(boolean initialized)
Define whether this I2C device has been initialized.
Parameters:
initialized
- whether this device is initialized
registerReadCallback
public
CallbackStore
registerReadCallback
(
BufferCallback
callback)
Register a callback to be run whenever a `read` operation is done.
Parameters:
callback
- the callback that is run on `read` operations
Returns:
the
CallbackStore
object associated with this callback.
registerWriteCallback
public
CallbackStore
registerWriteCallback
(
ConstBufferCallback
callback)
Register a callback to be run whenever a `write` operation is done.
Parameters:
callback
- the callback that is run on `write` operations
Returns:
the
CallbackStore
object associated with this callback.
resetData
public
void
resetData
()
Reset all I2C simulation data.