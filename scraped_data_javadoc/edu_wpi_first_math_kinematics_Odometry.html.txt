Package
edu.wpi.first.math.kinematics
Class Odometry<T>
java.lang.Object
edu.wpi.first.math.kinematics.Odometry<T>
Type Parameters:
T
- Wheel positions type.
Direct Known Subclasses:
DifferentialDriveOdometry
,
MecanumDriveOdometry
,
SwerveDriveOdometry
public class
Odometry
<T>
extends
Object
Class for odometry. Robot code should not use this directly- Instead, use the particular type for
 your drivetrain (e.g.,
DifferentialDriveOdometry
). Odometry allows you to track the
 robot's position on the field over the course of a match using readings from encoders and a
 gyroscope.
Teams can use odometry during the autonomous period for complex tasks like path following.
 Furthermore, odometry can be used for latency compensation when using computer-vision systems.
Constructor Summary
Constructors
Constructor
Description
Odometry
(
Kinematics
<?,
T
> kinematics,
Rotation2d
gyroAngle,
T
wheelPositions,
Pose2d
initialPoseMeters)
Constructs an Odometry object.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
Pose2d
getPoseMeters
()
Returns the position of the robot on the field.
void
resetPose
(
Pose2d
poseMeters)
Resets the pose.
void
resetPosition
(
Rotation2d
gyroAngle,
T
wheelPositions,
Pose2d
poseMeters)
Resets the robot's position on the field.
void
resetRotation
(
Rotation2d
rotation)
Resets the rotation of the pose.
void
resetTranslation
(
Translation2d
translation)
Resets the translation of the pose.
Pose2d
update
(
Rotation2d
gyroAngle,
T
wheelPositions)
Updates the robot's position on the field using forward kinematics and integration of the pose
 over time.
Methods inherited from class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
Odometry
public
Odometry
(
Kinematics
<?,
T
> kinematics,
Rotation2d
gyroAngle,
T
wheelPositions,
Pose2d
initialPoseMeters)
Constructs an Odometry object.
Parameters:
kinematics
- The kinematics of the drivebase.
gyroAngle
- The angle reported by the gyroscope.
wheelPositions
- The current encoder readings.
initialPoseMeters
- The starting position of the robot on the field.
Method Details
resetPosition
public
void
resetPosition
(
Rotation2d
gyroAngle,
T
wheelPositions,
Pose2d
poseMeters)
Resets the robot's position on the field.
The gyroscope angle does not need to be reset here on the user's robot code. The library
 automatically takes care of offsetting the gyro angle.
Parameters:
gyroAngle
- The angle reported by the gyroscope.
wheelPositions
- The current encoder readings.
poseMeters
- The position on the field that your robot is at.
resetPose
public
void
resetPose
(
Pose2d
poseMeters)
Resets the pose.
Parameters:
poseMeters
- The pose to reset to.
resetTranslation
public
void
resetTranslation
(
Translation2d
translation)
Resets the translation of the pose.
Parameters:
translation
- The translation to reset to.
resetRotation
public
void
resetRotation
(
Rotation2d
rotation)
Resets the rotation of the pose.
Parameters:
rotation
- The rotation to reset to.
getPoseMeters
public
Pose2d
getPoseMeters
()
Returns the position of the robot on the field.
Returns:
The pose of the robot (x and y are in meters).
update
public
Pose2d
update
(
Rotation2d
gyroAngle,
T
wheelPositions)
Updates the robot's position on the field using forward kinematics and integration of the pose
 over time. This method takes in an angle parameter which is used instead of the angular rate
 that is calculated from forward kinematics, in addition to the current distance measurement at
 each wheel.
Parameters:
gyroAngle
- The angle reported by the gyroscope.
wheelPositions
- The current encoder readings.
Returns:
The new pose of the robot.