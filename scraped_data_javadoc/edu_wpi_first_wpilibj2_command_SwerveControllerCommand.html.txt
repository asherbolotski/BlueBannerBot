Package
edu.wpi.first.wpilibj2.command
Class SwerveControllerCommand
java.lang.Object
edu.wpi.first.wpilibj2.command.Command
edu.wpi.first.wpilibj2.command.SwerveControllerCommand
All Implemented Interfaces:
Sendable
public class
SwerveControllerCommand
extends
Command
A command that uses two PID controllers (
PIDController
) and a ProfiledPIDController
 (
ProfiledPIDController
) to follow a trajectory
Trajectory
with a swerve drive.
This command outputs the raw desired Swerve Module States (
SwerveModuleState
) in an
 array. The desired wheel and module rotation velocities should be taken from those and used in
 velocity PIDs.
The robot angle controller does not follow the angle given by the trajectory but rather goes
 to the angle given in the final state of the trajectory.
This class is provided by the NewCommands VendorDep
Nested Class Summary
Nested classes/interfaces inherited from class edu.wpi.first.wpilibj2.command.
Command
Command.InterruptionBehavior
Constructor Summary
Constructors
Constructor
Description
SwerveControllerCommand
(
Trajectory
trajectory,
Supplier
<
Pose2d
> pose,
SwerveDriveKinematics
kinematics,
HolonomicDriveController
controller,
Consumer
<
SwerveModuleState
[]> outputModuleStates,
Subsystem
... requirements)
Constructs a new SwerveControllerCommand that when executed will follow the provided
 trajectory.
SwerveControllerCommand
(
Trajectory
trajectory,
Supplier
<
Pose2d
> pose,
SwerveDriveKinematics
kinematics,
HolonomicDriveController
controller,
Supplier
<
Rotation2d
> desiredRotation,
Consumer
<
SwerveModuleState
[]> outputModuleStates,
Subsystem
... requirements)
Constructs a new SwerveControllerCommand that when executed will follow the provided
 trajectory.
SwerveControllerCommand
(
Trajectory
trajectory,
Supplier
<
Pose2d
> pose,
SwerveDriveKinematics
kinematics,
PIDController
xController,
PIDController
yController,
ProfiledPIDController
thetaController,
Consumer
<
SwerveModuleState
[]> outputModuleStates,
Subsystem
... requirements)
Constructs a new SwerveControllerCommand that when executed will follow the provided
 trajectory.
SwerveControllerCommand
(
Trajectory
trajectory,
Supplier
<
Pose2d
> pose,
SwerveDriveKinematics
kinematics,
PIDController
xController,
PIDController
yController,
ProfiledPIDController
thetaController,
Supplier
<
Rotation2d
> desiredRotation,
Consumer
<
SwerveModuleState
[]> outputModuleStates,
Subsystem
... requirements)
Constructs a new SwerveControllerCommand that when executed will follow the provided
 trajectory.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
void
end
(boolean interrupted)
The action to take when the command ends.
void
execute
()
The main body of a command.
void
initialize
()
The initial subroutine of a command.
boolean
isFinished
()
Whether the command has finished.
Methods inherited from class edu.wpi.first.wpilibj2.command.
Command
addRequirements
,
addRequirements
,
alongWith
,
andThen
,
andThen
,
asProxy
,
beforeStarting
,
beforeStarting
,
cancel
,
deadlineFor
,
deadlineWith
,
finallyDo
,
finallyDo
,
getInterruptionBehavior
,
getName
,
getRequirements
,
getSubsystem
,
handleInterrupt
,
hasRequirement
,
ignoringDisable
,
initSendable
,
isScheduled
,
onlyIf
,
onlyWhile
,
raceWith
,
repeatedly
,
runsWhenDisabled
,
schedule
,
setName
,
setSubsystem
,
unless
,
until
,
withDeadline
,
withInterruptBehavior
,
withName
,
withTimeout
,
withTimeout
Methods inherited from class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
SwerveControllerCommand
public
SwerveControllerCommand
(
Trajectory
trajectory,
Supplier
<
Pose2d
> pose,
SwerveDriveKinematics
kinematics,
PIDController
xController,
PIDController
yController,
ProfiledPIDController
thetaController,
Supplier
<
Rotation2d
> desiredRotation,
Consumer
<
SwerveModuleState
[]> outputModuleStates,
Subsystem
... requirements)
Constructs a new SwerveControllerCommand that when executed will follow the provided
 trajectory. This command will not return output voltages but rather raw module states from the
 position controllers which need to be put into a velocity PID.
Note: The controllers will *not* set the outputVolts to zero upon completion of the path.
 This is left to the user to do since it is not appropriate for paths with nonstationary
 endstates.
Parameters:
trajectory
- The trajectory to follow.
pose
- A function that supplies the robot pose - use one of the odometry classes to
     provide this.
kinematics
- The kinematics for the robot drivetrain.
xController
- The Trajectory Tracker PID controller for the robot's x position.
yController
- The Trajectory Tracker PID controller for the robot's y position.
thetaController
- The Trajectory Tracker PID controller for angle for the robot.
desiredRotation
- The angle that the drivetrain should be facing. This is sampled at each
     time step.
outputModuleStates
- The raw output module states from the position controllers.
requirements
- The subsystems to require.
SwerveControllerCommand
public
SwerveControllerCommand
(
Trajectory
trajectory,
Supplier
<
Pose2d
> pose,
SwerveDriveKinematics
kinematics,
PIDController
xController,
PIDController
yController,
ProfiledPIDController
thetaController,
Consumer
<
SwerveModuleState
[]> outputModuleStates,
Subsystem
... requirements)
Constructs a new SwerveControllerCommand that when executed will follow the provided
 trajectory. This command will not return output voltages but rather raw module states from the
 position controllers which need to be put into a velocity PID.
Note: The controllers will *not* set the outputVolts to zero upon completion of the path.
 This is left to the user since it is not appropriate for paths with nonstationary endstates.
Note 2: The final rotation of the robot will be set to the rotation of the final pose in the
 trajectory. The robot will not follow the rotations from the poses at each timestep. If
 alternate rotation behavior is desired, the other constructor with a supplier for rotation
 should be used.
Parameters:
trajectory
- The trajectory to follow.
pose
- A function that supplies the robot pose - use one of the odometry classes to
     provide this.
kinematics
- The kinematics for the robot drivetrain.
xController
- The Trajectory Tracker PID controller for the robot's x position.
yController
- The Trajectory Tracker PID controller for the robot's y position.
thetaController
- The Trajectory Tracker PID controller for angle for the robot.
outputModuleStates
- The raw output module states from the position controllers.
requirements
- The subsystems to require.
SwerveControllerCommand
public
SwerveControllerCommand
(
Trajectory
trajectory,
Supplier
<
Pose2d
> pose,
SwerveDriveKinematics
kinematics,
HolonomicDriveController
controller,
Consumer
<
SwerveModuleState
[]> outputModuleStates,
Subsystem
... requirements)
Constructs a new SwerveControllerCommand that when executed will follow the provided
 trajectory. This command will not return output voltages but rather raw module states from the
 position controllers which need to be put into a velocity PID.
Note: The controllers will *not* set the outputVolts to zero upon completion of the path-
 this is left to the user, since it is not appropriate for paths with nonstationary endstates.
Note 2: The final rotation of the robot will be set to the rotation of the final pose in the
 trajectory. The robot will not follow the rotations from the poses at each timestep. If
 alternate rotation behavior is desired, the other constructor with a supplier for rotation
 should be used.
Parameters:
trajectory
- The trajectory to follow.
pose
- A function that supplies the robot pose - use one of the odometry classes to
     provide this.
kinematics
- The kinematics for the robot drivetrain.
controller
- The HolonomicDriveController for the drivetrain.
outputModuleStates
- The raw output module states from the position controllers.
requirements
- The subsystems to require.
SwerveControllerCommand
public
SwerveControllerCommand
(
Trajectory
trajectory,
Supplier
<
Pose2d
> pose,
SwerveDriveKinematics
kinematics,
HolonomicDriveController
controller,
Supplier
<
Rotation2d
> desiredRotation,
Consumer
<
SwerveModuleState
[]> outputModuleStates,
Subsystem
... requirements)
Constructs a new SwerveControllerCommand that when executed will follow the provided
 trajectory. This command will not return output voltages but rather raw module states from the
 position controllers which need to be put into a velocity PID.
Note: The controllers will *not* set the outputVolts to zero upon completion of the path-
 this is left to the user, since it is not appropriate for paths with nonstationary endstates.
Parameters:
trajectory
- The trajectory to follow.
pose
- A function that supplies the robot pose - use one of the odometry classes to
     provide this.
kinematics
- The kinematics for the robot drivetrain.
controller
- The HolonomicDriveController for the drivetrain.
desiredRotation
- The angle that the drivetrain should be facing. This is sampled at each
     time step.
outputModuleStates
- The raw output module states from the position controllers.
requirements
- The subsystems to require.
Method Details
initialize
public
void
initialize
()
Description copied from class:
Command
The initial subroutine of a command. Called once when the command is initially scheduled.
Overrides:
initialize
in class
Command
execute
public
void
execute
()
Description copied from class:
Command
The main body of a command. Called repeatedly while the command is scheduled.
Overrides:
execute
in class
Command
end
public
void
end
(boolean interrupted)
Description copied from class:
Command
The action to take when the command ends. Called when either the command finishes normally, or
 when it interrupted/canceled.
Do not schedule commands here that share requirements with this command. Use
Command.andThen(Command...)
instead.
Overrides:
end
in class
Command
Parameters:
interrupted
- whether the command was interrupted/canceled
isFinished
public
boolean
isFinished
()
Description copied from class:
Command
Whether the command has finished. Once a command finishes, the scheduler will call its end()
 method and un-schedule it.
Overrides:
isFinished
in class
Command
Returns:
whether the command has finished.