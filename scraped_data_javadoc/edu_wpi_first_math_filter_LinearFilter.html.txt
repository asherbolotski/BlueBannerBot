Package
edu.wpi.first.math.filter
Class LinearFilter
java.lang.Object
edu.wpi.first.math.filter.LinearFilter
public class
LinearFilter
extends
Object
This class implements a linear, digital filter. All types of FIR and IIR filters are supported.
 Static factory methods are provided to create commonly used types of filters.
Filters are of the form: y[n] = (b0 x[n] + b1 x[n-1] + ... + bP x[n-P]) - (a0 y[n-1] + a2
 y[n-2] + ... + aQ y[n-Q])
Where: y[n] is the output at time "n" x[n] is the input at time "n" y[n-1] is the output from
 the LAST time step ("n-1") x[n-1] is the input from the LAST time step ("n-1") b0...bP are the
 "feedforward" (FIR) gains a0...aQ are the "feedback" (IIR) gains IMPORTANT! Note the "-" sign in
 front of the feedback term! This is a common convention in signal processing.
What can linear filters do? Basically, they can filter, or diminish, the effects of
 undesirable input frequencies. High frequencies, or rapid changes, can be indicative of sensor
 noise or be otherwise undesirable. A "low pass" filter smooths out the signal, reducing the
 impact of these high frequency components. Likewise, a "high pass" filter gets rid of slow-moving
 signal components, letting you detect large changes more easily.
Example FRC applications of filters: - Getting rid of noise from an analog sensor input (note:
 the roboRIO's FPGA can do this faster in hardware) - Smoothing out joystick input to prevent the
 wheels from slipping or the robot from tipping - Smoothing motor commands so that unnecessary
 strain isn't put on electrical or mechanical components - If you use clever gains, you can make a
 PID controller out of this class!
For more on filters, we highly recommend the following articles:
https://en.wikipedia.org/wiki/Linear_filter
https://en.wikipedia.org/wiki/Iir_filter
https://en.wikipedia.org/wiki/Fir_filter
Note 1: calculate() should be called by the user on a known, regular period. You can use a
 Notifier for this or do it "inline" with code in a periodic function.
Note 2: For ALL filters, gains are necessarily a function of frequency. If you make a filter
 that works well for you at, say, 100Hz, you will most definitely need to adjust the gains if you
 then want to run it at 200Hz! Combining this with Note 1 - the impetus is on YOU as a developer
 to make sure calculate() gets called at the desired, constant frequency!
Constructor Summary
Constructors
Constructor
Description
LinearFilter
(double[] ffGains,
 double[] fbGains)
Create a linear FIR or IIR filter.
Method Summary
All Methods
Static Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
static
LinearFilter
backwardFiniteDifference
(int derivative,
 int samples,
 double period)
Creates a backward finite difference filter that computes the nth derivative of the input given
 the specified number of samples.
double
calculate
(double input)
Calculates the next value of the filter.
static
LinearFilter
finiteDifference
(int derivative,
 int[] stencil,
 double period)
Creates a finite difference filter that computes the nth derivative of the input given the
 specified stencil points.
static
LinearFilter
highPass
(double timeConstant,
 double period)
Creates a first-order high-pass filter of the form: y[n] = gain x[n] + (-gain) x[n-1] + gain
 y[n-1] where gain = e
-dt / T
, T is the time constant in seconds.
double
lastValue
()
Returns the last value calculated by the LinearFilter.
static
LinearFilter
movingAverage
(int taps)
Creates a K-tap FIR moving average filter of the form: y[n] = 1/k (x[k] + x[k-1] + ...
void
reset
()
Reset the filter state.
void
reset
(double[] inputBuffer,
 double[] outputBuffer)
Resets the filter state, initializing internal buffers to the provided values.
static
LinearFilter
singlePoleIIR
(double timeConstant,
 double period)
Creates a one-pole IIR low-pass filter of the form: y[n] = (1-gain) x[n] + gain y[n-1] where
 gain = e
-dt / T
, T is the time constant in seconds.
Methods inherited from class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
LinearFilter
public
LinearFilter
(double[] ffGains,
 double[] fbGains)
Create a linear FIR or IIR filter.
Parameters:
ffGains
- The "feedforward" or FIR gains.
fbGains
- The "feedback" or IIR gains.
Method Details
singlePoleIIR
public static
LinearFilter
singlePoleIIR
(double timeConstant,
 double period)
Creates a one-pole IIR low-pass filter of the form: y[n] = (1-gain) x[n] + gain y[n-1] where
 gain = e
-dt / T
, T is the time constant in seconds.
Note: T = 1 / (2πf) where f is the cutoff frequency in Hz, the frequency above which the
 input starts to attenuate.
This filter is stable for time constants greater than zero.
Parameters:
timeConstant
- The discrete-time time constant in seconds.
period
- The period in seconds between samples taken by the user.
Returns:
Linear filter.
highPass
public static
LinearFilter
highPass
(double timeConstant,
 double period)
Creates a first-order high-pass filter of the form: y[n] = gain x[n] + (-gain) x[n-1] + gain
 y[n-1] where gain = e
-dt / T
, T is the time constant in seconds.
Note: T = 1 / (2πf) where f is the cutoff frequency in Hz, the frequency below which the
 input starts to attenuate.
This filter is stable for time constants greater than zero.
Parameters:
timeConstant
- The discrete-time time constant in seconds.
period
- The period in seconds between samples taken by the user.
Returns:
Linear filter.
movingAverage
public static
LinearFilter
movingAverage
(int taps)
Creates a K-tap FIR moving average filter of the form: y[n] = 1/k (x[k] + x[k-1] + ... + x[0]).
This filter is always stable.
Parameters:
taps
- The number of samples to average over. Higher = smoother but slower.
Returns:
Linear filter.
Throws:
IllegalArgumentException
- if number of taps is less than 1.
finiteDifference
public static
LinearFilter
finiteDifference
(int derivative,
 int[] stencil,
 double period)
Creates a finite difference filter that computes the nth derivative of the input given the
 specified stencil points.
Stencil points are the indices of the samples to use in the finite difference. 0 is the
 current sample, -1 is the previous sample, -2 is the sample before that, etc. Don't use
 positive stencil points (samples from the future) if the LinearFilter will be used for
 stream-based online filtering (e.g., taking derivative of encoder samples in real-time).
Parameters:
derivative
- The order of the derivative to compute.
stencil
- List of stencil points. Its length is the number of samples to use to compute
     the given derivative. This must be one more than the order of the derivative or higher.
period
- The period in seconds between samples taken by the user.
Returns:
Linear filter.
Throws:
IllegalArgumentException
- if derivative < 1, samples <= 0, or derivative >=
     samples.
backwardFiniteDifference
public static
LinearFilter
backwardFiniteDifference
(int derivative,
 int samples,
 double period)
Creates a backward finite difference filter that computes the nth derivative of the input given
 the specified number of samples.
For example, a first derivative filter that uses two samples and a sample period of 20 ms
 would be
LinearFilter.backwardFiniteDifference(1, 2, 0.02);
Parameters:
derivative
- The order of the derivative to compute.
samples
- The number of samples to use to compute the given derivative. This must be one
     more than the order of derivative or higher.
period
- The period in seconds between samples taken by the user.
Returns:
Linear filter.
reset
public
void
reset
()
Reset the filter state.
reset
public
void
reset
(double[] inputBuffer,
 double[] outputBuffer)
Resets the filter state, initializing internal buffers to the provided values.
These are the expected lengths of the buffers, depending on what type of linear filter used:
Type
Input Buffer Length
Output Buffer Length
Unspecified
length of
ffGains
length of
fbGains
Single Pole IIR
1
1
High-Pass
2
1
Moving Average
taps
0
Finite Difference
length of
stencil
0
Backward Finite Difference
samples
0
Parameters:
inputBuffer
- Values to initialize input buffer.
outputBuffer
- Values to initialize output buffer.
Throws:
IllegalArgumentException
- if length of inputBuffer or outputBuffer does not match the
     length of ffGains and fbGains provided in the constructor.
calculate
public
double
calculate
(double input)
Calculates the next value of the filter.
Parameters:
input
- Current input value.
Returns:
The filtered value at this step
lastValue
public
double
lastValue
()
Returns the last value calculated by the LinearFilter.
Returns:
The last value.