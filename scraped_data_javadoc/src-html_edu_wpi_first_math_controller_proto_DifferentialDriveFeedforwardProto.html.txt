001
// Copyright (c) FIRST and other WPILib contributors.
002
// Open Source Software; you can modify and/or share it under the terms of
003
// the WPILib BSD license file in the root directory of this project.
004
005
package edu.wpi.first.math.controller.proto;
006
007
import edu.wpi.first.math.controller.DifferentialDriveFeedforward;
008
import edu.wpi.first.math.proto.Controller.ProtobufDifferentialDriveFeedforward;
009
import edu.wpi.first.util.protobuf.Protobuf;
010
import us.hebi.quickbuf.Descriptors.Descriptor;
011
012
public final class DifferentialDriveFeedforwardProto
013
implements Protobuf<DifferentialDriveFeedforward, ProtobufDifferentialDriveFeedforward> {
014
@Override
015
public Class<DifferentialDriveFeedforward> getTypeClass() {
016
return DifferentialDriveFeedforward.class;
017
}
018
019
@Override
020
public Descriptor getDescriptor() {
021
return ProtobufDifferentialDriveFeedforward.getDescriptor();
022
}
023
024
@Override
025
public ProtobufDifferentialDriveFeedforward createMessage() {
026
return ProtobufDifferentialDriveFeedforward.newInstance();
027
}
028
029
@Override
030
public DifferentialDriveFeedforward unpack(ProtobufDifferentialDriveFeedforward msg) {
031
return new DifferentialDriveFeedforward(
032
msg.getKvLinear(), msg.getKaLinear(), msg.getKvAngular(), msg.getKaAngular());
033
}
034
035
@Override
036
public void pack(ProtobufDifferentialDriveFeedforward msg, DifferentialDriveFeedforward value) {
037
msg.setKvLinear(value.m_kVLinear);
038
msg.setKaLinear(value.m_kALinear);
039
msg.setKvAngular(value.m_kVAngular);
040
msg.setKaAngular(value.m_kAAngular);
041
}
042
}