001
// Copyright (c) FIRST and other WPILib contributors.
002
// Open Source Software; you can modify and/or share it under the terms of
003
// the WPILib BSD license file in the root directory of this project.
004
005
// THIS FILE WAS AUTO-GENERATED BY ./wpilibj/generate_pwm_motor_controllers.py. DO NOT MODIFY
006
007
package edu.wpi.first.wpilibj.motorcontrol;
008
009
import edu.wpi.first.hal.FRCNetComm.tResourceType;
010
import edu.wpi.first.hal.HAL;
011
import edu.wpi.first.wpilibj.PWM;
012
013
/**
014
* Vex Robotics Victor 888 Motor Controller.
015
*
016
* <p>Note that the Victor 888 uses the following bounds for PWM values. These values should work
017
* reasonably well for most controllers, but if users experience issues such as asymmetric behavior
018
* around the deadband or inability to saturate the controller in either direction, calibration is
019
* recommended. The calibration procedure can be found in the Victor 888 User Manual available from
020
* Vex Robotics.
021
*
022
* <ul>
023
*   <li>2.027ms = full "forward"
024
*   <li>1.525ms = the "high end" of the deadband range
025
*   <li>1.507ms = center of the deadband range (off)
026
*   <li>1.490ms = the "low end" of the deadband range
027
*   <li>1.026ms = full "reverse"
028
* </ul>
029
*/
030
public class Victor extends PWMMotorController {
031
/**
032
* Constructor.
033
*
034
* @param channel The PWM channel that the Victor 888 is attached to. 0-9 are on-board, 10-19
035
*     are on the MXP port
036
*/
037
@SuppressWarnings("this-escape")
038
public Victor(final int channel) {
039
super("Victor", channel);
040
041
m_pwm.setBoundsMicroseconds(2027, 1525, 1507, 1490, 1026);
042
m_pwm.setPeriodMultiplier(PWM.PeriodMultiplier.k2X);
043
m_pwm.setSpeed(0.0);
044
m_pwm.setZeroLatch();
045
046
HAL.report(tResourceType.kResourceType_Victor, getChannel() + 1);
047
}
048
}