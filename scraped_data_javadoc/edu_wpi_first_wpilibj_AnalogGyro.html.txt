Package
edu.wpi.first.wpilibj
Class AnalogGyro
java.lang.Object
edu.wpi.first.wpilibj.AnalogGyro
All Implemented Interfaces:
Sendable
,
AutoCloseable
public class
AnalogGyro
extends
Object
implements
Sendable
,
AutoCloseable
Use a rate gyro to return the robots heading relative to a starting position. The Gyro class
 tracks the robots heading based on the starting position. As the robot rotates the new heading is
 computed by integrating the rate of rotation returned by the sensor. When the class is
 instantiated, it does a short calibration routine where it samples the gyro while at rest to
 determine the default offset. This is subtracted from each sample to determine the heading.
This class is for gyro sensors that connect to an analog input.
Constructor Summary
Constructors
Constructor
Description
AnalogGyro
(int channel)
Gyro constructor using the channel number.
AnalogGyro
(int channel,
 int center,
 double offset)
Gyro constructor using the channel number along with parameters for presetting the center and
 offset values.
AnalogGyro
(
AnalogInput
channel)
Gyro constructor with a precreated analog channel object.
AnalogGyro
(
AnalogInput
channel,
 int center,
 double offset)
Gyro constructor with a precreated analog channel object along with parameters for presetting
 the center and offset values.
Method Summary
All Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
void
calibrate
()
Calibrate the gyro by running for a number of samples and computing the center value.
void
close
()
Delete (free) the accumulator and the analog components used for the gyro.
AnalogInput
getAnalogInput
()
Gets the analog input for the gyro.
double
getAngle
()
Return the heading of the robot in degrees.
int
getCenter
()
Return the gyro center value set during calibration to use as a future preset.
double
getOffset
()
Return the gyro offset value set during calibration to use as a future preset.
double
getRate
()
Return the rate of rotation of the gyro.
Rotation2d
getRotation2d
()
Return the heading of the robot as a
Rotation2d
.
void
initSendable
(
SendableBuilder
builder)
Initializes this
Sendable
object.
void
reset
()
Reset the gyro.
void
setDeadband
(double volts)
Set the size of the neutral zone.
void
setSensitivity
(double voltsPerDegreePerSecond)
Set the gyro sensitivity.
Methods inherited from class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
AnalogGyro
public
AnalogGyro
(int channel)
Gyro constructor using the channel number.
Parameters:
channel
- The analog channel the gyro is connected to. Gyros can only be used on on-board
     channels 0-1.
AnalogGyro
public
AnalogGyro
(
AnalogInput
channel)
Gyro constructor with a precreated analog channel object. Use this constructor when the analog
 channel needs to be shared.
Parameters:
channel
- The AnalogInput object that the gyro is connected to. Gyros can only be used on
     on-board channels 0-1.
AnalogGyro
public
AnalogGyro
(int channel,
 int center,
 double offset)
Gyro constructor using the channel number along with parameters for presetting the center and
 offset values. Bypasses calibration.
Parameters:
channel
- The analog channel the gyro is connected to. Gyros can only be used on on-board
     channels 0-1.
center
- Preset uncalibrated value to use as the accumulator center value.
offset
- Preset uncalibrated value to use as the gyro offset.
AnalogGyro
public
AnalogGyro
(
AnalogInput
channel,
 int center,
 double offset)
Gyro constructor with a precreated analog channel object along with parameters for presetting
 the center and offset values. Bypasses calibration.
Parameters:
channel
- The analog channel the gyro is connected to. Gyros can only be used on on-board
     channels 0-1.
center
- Preset uncalibrated value to use as the accumulator center value.
offset
- Preset uncalibrated value to use as the gyro offset.
Method Details
calibrate
public
void
calibrate
()
Calibrate the gyro by running for a number of samples and computing the center value. Then use
 the center value as the Accumulator center value for subsequent measurements.
It's important to make sure that the robot is not moving while the centering calculations
 are in progress, this is typically done when the robot is first turned on while it's sitting at
 rest before the competition starts.
getRotation2d
public
Rotation2d
getRotation2d
()
Return the heading of the robot as a
Rotation2d
.
The angle is continuous, that is it will continue from 360 to 361 degrees. This allows
 algorithms that wouldn't want to see a discontinuity in the gyro output as it sweeps past from
 360 to 0 on the second time around.
The angle is expected to increase as the gyro turns counterclockwise when looked at from the
 top. It needs to follow the NWU axis convention.
This heading is based on integration of the returned rate from the gyro.
Returns:
the current heading of the robot as a
Rotation2d
.
reset
public
void
reset
()
Reset the gyro.
Resets the gyro to a heading of zero. This can be used if there is significant drift in the
 gyro, and it needs to be recalibrated after it has been running.
close
public
void
close
()
Delete (free) the accumulator and the analog components used for the gyro.
Specified by:
close
in interface
AutoCloseable
getAngle
public
double
getAngle
()
Return the heading of the robot in degrees.
The angle is continuous, that is it will continue from 360 to 361 degrees. This allows
 algorithms that wouldn't want to see a discontinuity in the gyro output as it sweeps past from
 360 to 0 on the second time around.
The angle is expected to increase as the gyro turns clockwise when looked at from the top.
 It needs to follow the NED axis convention.
This heading is based on integration of the returned rate from the gyro.
Returns:
the current heading of the robot in degrees.
getRate
public
double
getRate
()
Return the rate of rotation of the gyro.
The rate is based on the most recent reading of the gyro analog value
The rate is expected to be positive as the gyro turns clockwise when looked at from the top.
 It needs to follow the NED axis convention.
Returns:
the current rate in degrees per second
getOffset
public
double
getOffset
()
Return the gyro offset value set during calibration to use as a future preset.
Returns:
the current offset value
getCenter
public
int
getCenter
()
Return the gyro center value set during calibration to use as a future preset.
Returns:
the current center value
setSensitivity
public
void
setSensitivity
(double voltsPerDegreePerSecond)
Set the gyro sensitivity. This takes the number of volts/degree/second sensitivity of the gyro
 and uses it in subsequent calculations to allow the code to work with multiple gyros. This
 value is typically found in the gyro datasheet.
Parameters:
voltsPerDegreePerSecond
- The sensitivity in Volts/degree/second.
setDeadband
public
void
setDeadband
(double volts)
Set the size of the neutral zone. Any voltage from the gyro less than this amount from the
 center is considered stationary. Setting a deadband will decrease the amount of drift when the
 gyro isn't rotating, but will make it less accurate.
Parameters:
volts
- The size of the deadband in volts
getAnalogInput
public
AnalogInput
getAnalogInput
()
Gets the analog input for the gyro.
Returns:
AnalogInput
initSendable
public
void
initSendable
(
SendableBuilder
builder)
Description copied from interface:
Sendable
Initializes this
Sendable
object.
Specified by:
initSendable
in interface
Sendable
Parameters:
builder
- sendable builder