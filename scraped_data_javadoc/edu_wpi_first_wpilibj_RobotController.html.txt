Package
edu.wpi.first.wpilibj
Class RobotController
java.lang.Object
edu.wpi.first.wpilibj.RobotController
public final class
RobotController
extends
Object
Contains functions for roboRIO functionality.
Nested Class Summary
Nested Classes
Modifier and Type
Class
Description
static enum
RobotController.RadioLEDState
State for the radio led.
Method Summary
All Methods
Static Methods
Concrete Methods
Modifier and Type
Method
Description
static double
getBatteryVoltage
()
Read the battery voltage.
static double
getBrownoutVoltage
()
Get the current brownout voltage setting.
static
CANStatus
getCANStatus
()
Get the current status of the CAN bus.
static
String
getComments
()
Return the comments from the roboRIO web interface.
static int
getCommsDisableCount
()
Gets the number of times the system has been disabled due to communication errors with the
 Driver Station.
static double
getCPUTemp
()
Get the current CPU temperature in degrees Celsius.
static double
getCurrent3V3
()
Get the current output of the 3.3V rail.
static double
getCurrent5V
()
Get the current output of the 5V rail.
static double
getCurrent6V
()
Get the current output of the 6V rail.
static boolean
getEnabled3V3
()
Get the enabled state of the 3.3V rail.
static boolean
getEnabled5V
()
Get the enabled state of the 5V rail.
static boolean
getEnabled6V
()
Get the enabled state of the 6V rail.
static int
getFaultCount3V3
()
Get the count of the total current faults on the 3.3V rail since the code started.
static int
getFaultCount5V
()
Get the count of the total current faults on the 5V rail since the code started.
static int
getFaultCount6V
()
Get the count of the total current faults on the 6V rail since the code started.
static long
getFPGARevision
()
Return the FPGA Revision number.
static long
getFPGATime
()
Read the microsecond timer from the FPGA.
static int
getFPGAVersion
()
Return the FPGA Version number.
static double
getInputCurrent
()
Get the input current to the robot controller.
static double
getInputVoltage
()
Get the input voltage to the robot controller.
static
Voltage
getMeasureBatteryVoltage
()
Read the battery voltage in a measure.
static
Voltage
getMeasureBrownoutVoltage
()
Get the current brownout voltage setting in a measure.
static
Temperature
getMeasureCPUTemp
()
Get the current CPU temperature in a measure.
static
Current
getMeasureCurrent3V3
()
Get the current output in a measure of the 3.3V rail.
static
Current
getMeasureCurrent5V
()
Get the current output in a measure of the 5V rail.
static
Current
getMeasureCurrent6V
()
Get the current output in a measure of the 6V rail.
static
Time
getMeasureFPGATime
()
Read the microsecond timer in a measure from the FPGA.
static
Current
getMeasureInputCurrent
()
Get the input current to the robot controller in a measure.
static
Voltage
getMeasureInputVoltage
()
Get the input voltage to the robot controller in a measure.
static
Time
getMeasureTime
()
Read the microsecond timestamp.
static
Voltage
getMeasureVoltage3V3
()
Get the voltage in a measure of the 3.3V rail.
static
Voltage
getMeasureVoltage5V
()
Get the voltage in a measure of the 5V rail.
static
Voltage
getMeasureVoltage6V
()
Get the voltage in a measure of the 6V rail.
static
RobotController.RadioLEDState
getRadioLEDState
()
Get the state of the "Radio" LED.
static boolean
getRSLState
()
Gets the current state of the Robot Signal Light (RSL).
static
String
getSerialNumber
()
Return the serial number of the roboRIO.
static int
getTeamNumber
()
Returns the team number configured for the robot controller.
static long
getTime
()
Read the microsecond timestamp.
static boolean
getUserButton
()
Get the state of the "USER" button on the roboRIO.
static double
getVoltage3V3
()
Get the voltage of the 3.3V rail.
static double
getVoltage5V
()
Get the voltage of the 5V rail.
static double
getVoltage6V
()
Get the voltage of the 6V rail.
static boolean
isBrownedOut
()
Check if the system is browned out.
static boolean
isSysActive
()
Gets a value indicating whether the FPGA outputs are enabled.
static boolean
isSystemTimeValid
()
Gets if the system time is valid.
static void
resetRailFaultCounts
()
Reset the overcurrent fault counters for all user rails to 0.
static void
setBrownoutVoltage
(double brownoutVoltage)
Set the voltage the roboRIO will brownout and disable all outputs.
static void
setBrownoutVoltage
(
Voltage
brownoutVoltage)
Set the voltage in a measure the roboRIO will brownout and disable all outputs.
static void
setEnabled3V3
(boolean enabled)
Enables or disables the 3.3V rail.
static void
setEnabled5V
(boolean enabled)
Enables or disables the 5V rail.
static void
setEnabled6V
(boolean enabled)
Enables or disables the 6V rail.
static void
setRadioLEDState
(
RobotController.RadioLEDState
state)
Set the state of the "Radio" LED.
static void
setTimeSource
(
LongSupplier
supplier)
Sets a new source to provide the clock time in microseconds.
Methods inherited from class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Method Details
getFPGAVersion
public static
int
getFPGAVersion
()
Return the FPGA Version number. For now, expect this to be the current year.
Returns:
FPGA Version number.
getFPGARevision
public static
long
getFPGARevision
()
Return the FPGA Revision number. The format of the revision is 3 numbers. The 12 most
 significant bits are the Major Revision. the next 8 bits are the Minor Revision. The 12 least
 significant bits are the Build Number.
Returns:
FPGA Revision number.
getSerialNumber
public static
String
getSerialNumber
()
Return the serial number of the roboRIO.
Returns:
The serial number of the roboRIO.
getComments
public static
String
getComments
()
Return the comments from the roboRIO web interface.
The comments string is cached after the first call to this function on the RoboRIO - restart
 the robot code to reload the comments string after changing it in the web interface.
Returns:
the comments from the roboRIO web interface.
getTeamNumber
public static
int
getTeamNumber
()
Returns the team number configured for the robot controller.
Returns:
team number, or 0 if not found.
setTimeSource
public static
void
setTimeSource
(
LongSupplier
supplier)
Sets a new source to provide the clock time in microseconds. Changing this affects the return
 value of
getTime
in Java.
Parameters:
supplier
- Function to return the time in microseconds.
getTime
public static
long
getTime
()
Read the microsecond timestamp. By default, the time is based on the FPGA hardware clock in
 microseconds since the FPGA started. However, the return value of this method may be modified
 to use any time base, including non-monotonic and non-continuous time bases.
Returns:
The current time in microseconds.
getMeasureTime
public static
Time
getMeasureTime
()
Read the microsecond timestamp. By default, the time is based on the FPGA hardware clock in
 microseconds since the FPGA started. However, the return value of this method may be modified
 to use any time base, including non-monotonic and non-continuous time bases.
Returns:
The current time in a measure.
getFPGATime
public static
long
getFPGATime
()
Read the microsecond timer from the FPGA.
Returns:
The current time in microseconds according to the FPGA.
getMeasureFPGATime
public static
Time
getMeasureFPGATime
()
Read the microsecond timer in a measure from the FPGA.
Returns:
The current time according to the FPGA in a measure.
getUserButton
public static
boolean
getUserButton
()
Get the state of the "USER" button on the roboRIO.
Warning: the User Button is used to stop user programs from automatically loading if it is
 held for more then 5 seconds. Because of this, it's not recommended to be used by teams for any
 other purpose.
Returns:
true if the button is currently pressed down
getBatteryVoltage
public static
double
getBatteryVoltage
()
Read the battery voltage.
Returns:
The battery voltage in Volts.
getMeasureBatteryVoltage
public static
Voltage
getMeasureBatteryVoltage
()
Read the battery voltage in a measure.
Returns:
The battery voltage in a measure.
isSysActive
public static
boolean
isSysActive
()
Gets a value indicating whether the FPGA outputs are enabled. The outputs may be disabled if
 the robot is disabled or e-stopped, the watchdog has expired, or if the roboRIO browns out.
Returns:
True if the FPGA outputs are enabled.
isBrownedOut
public static
boolean
isBrownedOut
()
Check if the system is browned out.
Returns:
True if the system is browned out
getCommsDisableCount
public static
int
getCommsDisableCount
()
Gets the number of times the system has been disabled due to communication errors with the
 Driver Station.
Returns:
number of disables due to communication errors.
getRSLState
public static
boolean
getRSLState
()
Gets the current state of the Robot Signal Light (RSL).
Returns:
The current state of the RSL- true if on, false if off
isSystemTimeValid
public static
boolean
isSystemTimeValid
()
Gets if the system time is valid.
Returns:
True if the system time is valid, false otherwise
getInputVoltage
public static
double
getInputVoltage
()
Get the input voltage to the robot controller.
Returns:
The controller input voltage value in Volts
getMeasureInputVoltage
public static
Voltage
getMeasureInputVoltage
()
Get the input voltage to the robot controller in a measure.
Returns:
The controller input voltage value in a measure.
getInputCurrent
public static
double
getInputCurrent
()
Get the input current to the robot controller.
Returns:
The controller input current value in Amps
getMeasureInputCurrent
public static
Current
getMeasureInputCurrent
()
Get the input current to the robot controller in a measure.
Returns:
The controller input current value in a measure.
getVoltage3V3
public static
double
getVoltage3V3
()
Get the voltage of the 3.3V rail.
Returns:
The controller 3.3V rail voltage value in Volts
getMeasureVoltage3V3
public static
Voltage
getMeasureVoltage3V3
()
Get the voltage in a measure of the 3.3V rail.
Returns:
The controller 3.3V rail voltage value in a measure.
getCurrent3V3
public static
double
getCurrent3V3
()
Get the current output of the 3.3V rail.
Returns:
The controller 3.3V rail output current value in Amps
getMeasureCurrent3V3
public static
Current
getMeasureCurrent3V3
()
Get the current output in a measure of the 3.3V rail.
Returns:
The controller 3.3V rail output current value in a measure.
setEnabled3V3
public static
void
setEnabled3V3
(boolean enabled)
Enables or disables the 3.3V rail.
Parameters:
enabled
- whether to enable the 3.3V rail.
getEnabled3V3
public static
boolean
getEnabled3V3
()
Get the enabled state of the 3.3V rail. The rail may be disabled due to a controller brownout,
 a short circuit on the rail, or controller over-voltage.
Returns:
The controller 3.3V rail enabled value
getFaultCount3V3
public static
int
getFaultCount3V3
()
Get the count of the total current faults on the 3.3V rail since the code started.
Returns:
The number of faults
getVoltage5V
public static
double
getVoltage5V
()
Get the voltage of the 5V rail.
Returns:
The controller 5V rail voltage value in Volts
getMeasureVoltage5V
public static
Voltage
getMeasureVoltage5V
()
Get the voltage in a measure of the 5V rail.
Returns:
The controller 5V rail voltage value in a measure.
getCurrent5V
public static
double
getCurrent5V
()
Get the current output of the 5V rail.
Returns:
The controller 5V rail output current value in Amps
getMeasureCurrent5V
public static
Current
getMeasureCurrent5V
()
Get the current output in a measure of the 5V rail.
Returns:
The controller 5V rail output current value in a measure.
setEnabled5V
public static
void
setEnabled5V
(boolean enabled)
Enables or disables the 5V rail.
Parameters:
enabled
- whether to enable the 5V rail.
getEnabled5V
public static
boolean
getEnabled5V
()
Get the enabled state of the 5V rail. The rail may be disabled due to a controller brownout, a
 short circuit on the rail, or controller over-voltage.
Returns:
The controller 5V rail enabled value
getFaultCount5V
public static
int
getFaultCount5V
()
Get the count of the total current faults on the 5V rail since the code started.
Returns:
The number of faults
getVoltage6V
public static
double
getVoltage6V
()
Get the voltage of the 6V rail.
Returns:
The controller 6V rail voltage value in Volts
getMeasureVoltage6V
public static
Voltage
getMeasureVoltage6V
()
Get the voltage in a measure of the 6V rail.
Returns:
The controller 6V rail voltage value in a measure.
getCurrent6V
public static
double
getCurrent6V
()
Get the current output of the 6V rail.
Returns:
The controller 6V rail output current value in Amps
getMeasureCurrent6V
public static
Current
getMeasureCurrent6V
()
Get the current output in a measure of the 6V rail.
Returns:
The controller 6V rail output current value in a measure.
setEnabled6V
public static
void
setEnabled6V
(boolean enabled)
Enables or disables the 6V rail.
Parameters:
enabled
- whether to enable the 6V rail.
getEnabled6V
public static
boolean
getEnabled6V
()
Get the enabled state of the 6V rail. The rail may be disabled due to a controller brownout, a
 short circuit on the rail, or controller over-voltage.
Returns:
The controller 6V rail enabled value
getFaultCount6V
public static
int
getFaultCount6V
()
Get the count of the total current faults on the 6V rail since the code started.
Returns:
The number of faults
resetRailFaultCounts
public static
void
resetRailFaultCounts
()
Reset the overcurrent fault counters for all user rails to 0.
getBrownoutVoltage
public static
double
getBrownoutVoltage
()
Get the current brownout voltage setting.
Returns:
The brownout voltage
getMeasureBrownoutVoltage
public static
Voltage
getMeasureBrownoutVoltage
()
Get the current brownout voltage setting in a measure.
Returns:
The brownout voltage in a measure.
setBrownoutVoltage
public static
void
setBrownoutVoltage
(double brownoutVoltage)
Set the voltage the roboRIO will brownout and disable all outputs.
Note that this only does anything on the roboRIO 2. On the roboRIO it is a no-op.
Parameters:
brownoutVoltage
- The brownout voltage
setBrownoutVoltage
public static
void
setBrownoutVoltage
(
Voltage
brownoutVoltage)
Set the voltage in a measure the roboRIO will brownout and disable all outputs.
Note that this only does anything on the roboRIO 2. On the roboRIO it is a no-op.
Parameters:
brownoutVoltage
- The brownout voltage in a measure
getCPUTemp
public static
double
getCPUTemp
()
Get the current CPU temperature in degrees Celsius.
Returns:
current CPU temperature in degrees Celsius
getMeasureCPUTemp
public static
Temperature
getMeasureCPUTemp
()
Get the current CPU temperature in a measure.
Returns:
current CPU temperature in a measure.
setRadioLEDState
public static
void
setRadioLEDState
(
RobotController.RadioLEDState
state)
Set the state of the "Radio" LED. On the RoboRIO, this writes to sysfs, so this function should
 not be called multiple times per loop cycle to avoid overruns.
Parameters:
state
- The state to set the LED to.
getRadioLEDState
public static
RobotController.RadioLEDState
getRadioLEDState
()
Get the state of the "Radio" LED. On the RoboRIO, this reads from sysfs, so this function
 should not be called multiple times per loop cycle to avoid overruns.
Returns:
The state of the LED.
getCANStatus
public static
CANStatus
getCANStatus
()
Get the current status of the CAN bus.
Returns:
The status of the CAN bus