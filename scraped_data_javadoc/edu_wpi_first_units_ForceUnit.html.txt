Package
edu.wpi.first.units
Class ForceUnit
java.lang.Object
edu.wpi.first.units.Unit
edu.wpi.first.units.MultUnit
<
MassUnit
,
LinearAccelerationUnit
>
edu.wpi.first.units.ForceUnit
public final class
ForceUnit
extends
MultUnit
<
MassUnit
,
LinearAccelerationUnit
>
A unit of force like
Units.Newtons
.
Method Summary
All Methods
Static Methods
Instance Methods
Concrete Methods
Modifier and Type
Method
Description
static
ForceUnit
combine
(
MassUnit
mass,
LinearAccelerationUnit
acceleration)
Combines a mass and (linear) acceleration to form a unit of force.
double
convertFrom
(double magnitude,
ForceUnit
otherUnit)
Converts a measurement value in terms of another unit to this unit.
ForceUnit
getBaseUnit
()
Gets the base unit of measurement that this unit is derived from.
TorqueUnit
multAsTorque
(
DistanceUnit
distance)
Multiplies this force unit by a unit of distance to create a unit of torque.
MutForce
mutable
(double initialMagnitude)
Creates a new mutable measurement that is initialized to the given magnitude in terms of this
 unit.
Force
of
(double magnitude)
Creates a new immutable measurement of the given magnitude in terms of this unit.
Force
ofBaseUnits
(double baseUnitMagnitude)
Creates a new immutable measurement of the given magnitude in terms of this unit's base unit.
Force
one
()
Gets a measure with a magnitude of 1.0 in terms of this unit.
VelocityUnit
<
ForceUnit
>
per
(
TimeUnit
time)
Combines this unit with a unit of time.
<U extends
Unit
>
PerUnit
<
ForceUnit
,
U>
per
(U other)
Creates a ratio unit between this unit and an arbitrary other unit.
Force
zero
()
Gets a measure of zero magnitude in terms of this unit.
Methods inherited from class edu.wpi.first.units.
MultUnit
combine
,
convertFrom
,
equals
,
hashCode
,
ofNative
,
ofNativeBaseUnits
,
toString
,
unitA
,
unitB
Methods inherited from class edu.wpi.first.units.
Unit
equivalent
,
fromBaseUnits
,
getConverterFromBase
,
getConverterToBase
,
isBaseUnit
,
name
,
symbol
,
toBaseUnits
Methods inherited from class java.lang.
Object
clone
,
finalize
,
getClass
,
notify
,
notifyAll
,
wait
,
wait
,
wait
Method Details
combine
public static
ForceUnit
combine
(
MassUnit
mass,
LinearAccelerationUnit
acceleration)
Combines a mass and (linear) acceleration to form a unit of force.
Parameters:
mass
- the unit of mass
acceleration
- the unit of acceleration
Returns:
the combined unit of force
getBaseUnit
public
ForceUnit
getBaseUnit
()
Description copied from class:
Unit
Gets the base unit of measurement that this unit is derived from. If the unit is the base unit,
 the unit will be returned.
NOTE:
Subclasses
must
override this method to provide the
 correct return type. Failing to do say will make unit combinations that use it break at
 runtime!
Unit baseUnit = new Unit(null, ...);
   baseUnit.getBaseUnit(); // returns baseUnit

   Unit derivedUnit = new Unit(baseUnit, ...);
   derivedUnit.getBaseUnit(); // returns baseUnit
Overrides:
getBaseUnit
in class
MultUnit
<
MassUnit
,
LinearAccelerationUnit
>
Returns:
the base unit
multAsTorque
public
TorqueUnit
multAsTorque
(
DistanceUnit
distance)
Multiplies this force unit by a unit of distance to create a unit of torque.
Parameters:
distance
- the unit of distance
Returns:
the combined torque unit
of
public
Force
of
(double magnitude)
Description copied from class:
MultUnit
Creates a new immutable measurement of the given magnitude in terms of this unit.
 Implementations are
strongly
recommended to sharpen the return type to a
 unit-specific measurement implementation.
Note: When called on an object of type
MultUnit
(and
not
a subclass!), this
 method will always return a
Mult
instance. If you want to
 avoid casting, use
MultUnit.ofNativeBaseUnits(double)
that returns a
Per
instance
 directly.
Overrides:
of
in class
MultUnit
<
MassUnit
,
LinearAccelerationUnit
>
Parameters:
magnitude
- the magnitude of the measure in terms of its base units.
Returns:
the measurement object
ofBaseUnits
public
Force
ofBaseUnits
(double baseUnitMagnitude)
Description copied from class:
MultUnit
Creates a new immutable measurement of the given magnitude in terms of this unit's base unit.
 Implementations are
strongly
recommended to sharpen the return type to a
 unit-specific measurement implementation.
Note: When called on an object of type
MultUnit
(and
not
a subclass!), this
 method will always return a
Mult
instance. If you want to
 avoid casting, use
MultUnit.ofNativeBaseUnits(double)
that returns a
Per
instance
 directly.
Overrides:
ofBaseUnits
in class
MultUnit
<
MassUnit
,
LinearAccelerationUnit
>
Parameters:
baseUnitMagnitude
- the magnitude of the measure in terms of its base units.
Returns:
the measurement object
zero
public
Force
zero
()
Description copied from class:
Unit
Gets a measure of zero magnitude in terms of this unit. The returned object is guaranteed to be
 of the same type returned by
Unit.of(double)
. Subclasses are encouraged to override this
 method to sharpen the return type.
Overrides:
zero
in class
MultUnit
<
MassUnit
,
LinearAccelerationUnit
>
Returns:
a zero-magnitude measure of this unit
one
public
Force
one
()
Description copied from class:
Unit
Gets a measure with a magnitude of 1.0 in terms of this unit. The returned object is guaranteed
 to be of the same type returned by
Unit.of(double)
. Subclasses are encouraged to override
 this method to sharpen the return type.
Overrides:
one
in class
MultUnit
<
MassUnit
,
LinearAccelerationUnit
>
Returns:
a measure of magnitude 1.0 in terms of this unit
mutable
public
MutForce
mutable
(double initialMagnitude)
Description copied from class:
Unit
Creates a new mutable measurement that is initialized to the given magnitude in terms of this
 unit. Implementations are
strongly
recommended to sharpen the return type to a
 unit-specific measurement implementation.
Overrides:
mutable
in class
MultUnit
<
MassUnit
,
LinearAccelerationUnit
>
Parameters:
initialMagnitude
- the initial magnitude of the mutable measurement
Returns:
the mutable measurement object
per
public
VelocityUnit
<
ForceUnit
>
per
(
TimeUnit
time)
Description copied from class:
Unit
Combines this unit with a unit of time. This often - but not always - results in a velocity.
 Subclasses should sharpen the return type to be unit-specific.
Overrides:
per
in class
MultUnit
<
MassUnit
,
LinearAccelerationUnit
>
Parameters:
time
- the unit of time
Returns:
the combined unit
per
public
<U extends
Unit
>
PerUnit
<
ForceUnit
,
U>
per
(U other)
Creates a ratio unit between this unit and an arbitrary other unit.
Type Parameters:
U
- the type of the other unit
Parameters:
other
- the other unit
Returns:
the ratio unit
convertFrom
public
double
convertFrom
(double magnitude,
ForceUnit
otherUnit)
Converts a measurement value in terms of another unit to this unit.
Parameters:
magnitude
- the magnitude of the measurement in terms of the other unit
otherUnit
- the other unit
Returns:
the value of the measurement in terms of this unit