Package
edu.wpi.first.wpilibj
Class PS5Controller
java.lang.Object
edu.wpi.first.wpilibj.GenericHID
edu.wpi.first.wpilibj.PS5Controller
All Implemented Interfaces:
Sendable
public class
PS5Controller
extends
GenericHID
implements
Sendable
Handle input from PS5 controllers connected to the Driver Station.
This class handles PS5 input that comes from the Driver Station. Each time a value is
 requested the most recent value is returned. There is a single class instance for each controller
 and the mapping of ports to hardware buttons depends on the code in the Driver Station.
Only first party controllers from Sony are guaranteed to have the correct mapping, and
 only through the official NI DS. Sim is not guaranteed to have the same mapping, as well as any
 3rd party controllers.
Nested Class Summary
Nested Classes
Modifier and Type
Class
Description
static enum
PS5Controller.Axis
Represents an axis on an PS5Controller.
static enum
PS5Controller.Button
Represents a digital button on a PS5Controller.
Nested classes/interfaces inherited from class edu.wpi.first.wpilibj.
GenericHID
GenericHID.HIDType
,
GenericHID.RumbleType
Constructor Summary
Constructors
Constructor
Description
PS5Controller
(int port)
Construct an instance of a controller.
Method Summary
All Methods
Instance Methods
Concrete Methods
Deprecated Methods
Modifier and Type
Method
Description
BooleanEvent
circle
(
EventLoop
loop)
Constructs an event instance around the circle button's digital signal.
BooleanEvent
create
(
EventLoop
loop)
Constructs an event instance around the create button's digital signal.
BooleanEvent
cross
(
EventLoop
loop)
Constructs an event instance around the cross button's digital signal.
boolean
getCircleButton
()
Read the value of the circle button on the controller.
boolean
getCircleButtonPressed
()
Whether the circle button was pressed since the last check.
boolean
getCircleButtonReleased
()
Whether the circle button was released since the last check.
boolean
getCreateButton
()
Read the value of the create button on the controller.
boolean
getCreateButtonPressed
()
Whether the create button was pressed since the last check.
boolean
getCreateButtonReleased
()
Whether the create button was released since the last check.
boolean
getCrossButton
()
Read the value of the cross button on the controller.
boolean
getCrossButtonPressed
()
Whether the cross button was pressed since the last check.
boolean
getCrossButtonReleased
()
Whether the cross button was released since the last check.
boolean
getL1Button
()
Read the value of the left trigger 1 button on the controller.
boolean
getL1ButtonPressed
()
Whether the left trigger 1 button was pressed since the last check.
boolean
getL1ButtonReleased
()
Whether the left trigger 1 button was released since the last check.
double
getL2Axis
()
Get the left trigger 2 axis value of the controller.
boolean
getL2Button
()
Read the value of the left trigger 2 button on the controller.
boolean
getL2ButtonPressed
()
Whether the left trigger 2 button was pressed since the last check.
boolean
getL2ButtonReleased
()
Whether the left trigger 2 button was released since the last check.
boolean
getL3Button
()
Read the value of the L3 (left stick) button on the controller.
boolean
getL3ButtonPressed
()
Whether the L3 (left stick) button was pressed since the last check.
boolean
getL3ButtonReleased
()
Whether the L3 (left stick) button was released since the last check.
double
getLeftX
()
Get the X axis value of left side of the controller.
double
getLeftY
()
Get the Y axis value of left side of the controller.
boolean
getOptionsButton
()
Read the value of the options button on the controller.
boolean
getOptionsButtonPressed
()
Whether the options button was pressed since the last check.
boolean
getOptionsButtonReleased
()
Whether the options button was released since the last check.
boolean
getPSButton
()
Read the value of the PlayStation button on the controller.
boolean
getPSButtonPressed
()
Whether the PlayStation button was pressed since the last check.
boolean
getPSButtonReleased
()
Whether the PlayStation button was released since the last check.
boolean
getR1Button
()
Read the value of the right trigger 1 button on the controller.
boolean
getR1ButtonPressed
()
Whether the right trigger 1 button was pressed since the last check.
boolean
getR1ButtonReleased
()
Whether the right trigger 1 button was released since the last check.
double
getR2Axis
()
Get the right trigger 2 axis value of the controller.
boolean
getR2Button
()
Read the value of the right trigger 2 button on the controller.
boolean
getR2ButtonPressed
()
Whether the right trigger 2 button was pressed since the last check.
boolean
getR2ButtonReleased
()
Whether the right trigger 2 button was released since the last check.
boolean
getR3Button
()
Read the value of the R3 (right stick) button on the controller.
boolean
getR3ButtonPressed
()
Whether the R3 (right stick) button was pressed since the last check.
boolean
getR3ButtonReleased
()
Whether the R3 (right stick) button was released since the last check.
double
getRightX
()
Get the X axis value of right side of the controller.
double
getRightY
()
Get the Y axis value of right side of the controller.
boolean
getSquareButton
()
Read the value of the square button on the controller.
boolean
getSquareButtonPressed
()
Whether the square button was pressed since the last check.
boolean
getSquareButtonReleased
()
Whether the square button was released since the last check.
boolean
getTouchpad
()
Deprecated, for removal: This API element is subject to removal in a future version.
Use
getTouchpadButton()
instead.
boolean
getTouchpadButton
()
Read the value of the touchpad button on the controller.
boolean
getTouchpadButtonPressed
()
Whether the touchpad button was pressed since the last check.
boolean
getTouchpadButtonReleased
()
Whether the touchpad button was released since the last check.
boolean
getTouchpadPressed
()
Deprecated, for removal: This API element is subject to removal in a future version.
Use
getTouchpadButtonPressed()
instead.
boolean
getTouchpadReleased
()
Deprecated, for removal: This API element is subject to removal in a future version.
Use
getTouchpadButtonReleased()
instead.
boolean
getTriangleButton
()
Read the value of the triangle button on the controller.
boolean
getTriangleButtonPressed
()
Whether the triangle button was pressed since the last check.
boolean
getTriangleButtonReleased
()
Whether the triangle button was released since the last check.
void
initSendable
(
SendableBuilder
builder)
Initializes this
Sendable
object.
BooleanEvent
L1
(
EventLoop
loop)
Constructs an event instance around the left trigger 1 button's digital signal.
BooleanEvent
L2
(
EventLoop
loop)
Constructs an event instance around the left trigger 2 button's digital signal.
BooleanEvent
L3
(
EventLoop
loop)
Constructs an event instance around the L3 (left stick) button's digital signal.
BooleanEvent
options
(
EventLoop
loop)
Constructs an event instance around the options button's digital signal.
BooleanEvent
PS
(
EventLoop
loop)
Constructs an event instance around the PlayStation button's digital signal.
BooleanEvent
R1
(
EventLoop
loop)
Constructs an event instance around the right trigger 1 button's digital signal.
BooleanEvent
R2
(
EventLoop
loop)
Constructs an event instance around the right trigger 2 button's digital signal.
BooleanEvent
R3
(
EventLoop
loop)
Constructs an event instance around the R3 (right stick) button's digital signal.
BooleanEvent
square
(
EventLoop
loop)
Constructs an event instance around the square button's digital signal.
BooleanEvent
touchpad
(
EventLoop
loop)
Constructs an event instance around the touchpad button's digital signal.
BooleanEvent
triangle
(
EventLoop
loop)
Constructs an event instance around the triangle button's digital signal.
Methods inherited from class edu.wpi.first.wpilibj.
GenericHID
axisGreaterThan
,
axisLessThan
,
button
,
getAxisCount
,
getAxisType
,
getButtonCount
,
getName
,
getPort
,
getPOV
,
getPOV
,
getPOVCount
,
getRawAxis
,
getRawButton
,
getRawButtonPressed
,
getRawButtonReleased
,
getType
,
isConnected
,
pov
,
pov
,
povCenter
,
povDown
,
povDownLeft
,
povDownRight
,
povLeft
,
povRight
,
povUp
,
povUpLeft
,
povUpRight
,
setOutput
,
setOutputs
,
setRumble
Methods inherited from class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Constructor Details
PS5Controller
public
PS5Controller
(int port)
Construct an instance of a controller.
Parameters:
port
- The port index on the Driver Station that the controller is plugged into (0-5).
Method Details
getLeftX
public
double
getLeftX
()
Get the X axis value of left side of the controller. Right is positive.
Returns:
The axis value.
getLeftY
public
double
getLeftY
()
Get the Y axis value of left side of the controller. Back is positive.
Returns:
The axis value.
getRightX
public
double
getRightX
()
Get the X axis value of right side of the controller. Right is positive.
Returns:
The axis value.
getRightY
public
double
getRightY
()
Get the Y axis value of right side of the controller. Back is positive.
Returns:
The axis value.
getL2Axis
public
double
getL2Axis
()
Get the left trigger 2 axis value of the controller. Note that this axis is bound to the
 range of [0, 1] as opposed to the usual [-1, 1].
Returns:
The axis value.
getR2Axis
public
double
getR2Axis
()
Get the right trigger 2 axis value of the controller. Note that this axis is bound to the
 range of [0, 1] as opposed to the usual [-1, 1].
Returns:
The axis value.
getSquareButton
public
boolean
getSquareButton
()
Read the value of the square button on the controller.
Returns:
The state of the button.
getSquareButtonPressed
public
boolean
getSquareButtonPressed
()
Whether the square button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getSquareButtonReleased
public
boolean
getSquareButtonReleased
()
Whether the square button was released since the last check.
Returns:
Whether the button was released since the last check.
square
public
BooleanEvent
square
(
EventLoop
loop)
Constructs an event instance around the square button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the square button's digital signal
     attached to the given loop.
getCrossButton
public
boolean
getCrossButton
()
Read the value of the cross button on the controller.
Returns:
The state of the button.
getCrossButtonPressed
public
boolean
getCrossButtonPressed
()
Whether the cross button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getCrossButtonReleased
public
boolean
getCrossButtonReleased
()
Whether the cross button was released since the last check.
Returns:
Whether the button was released since the last check.
cross
public
BooleanEvent
cross
(
EventLoop
loop)
Constructs an event instance around the cross button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the cross button's digital signal
     attached to the given loop.
getCircleButton
public
boolean
getCircleButton
()
Read the value of the circle button on the controller.
Returns:
The state of the button.
getCircleButtonPressed
public
boolean
getCircleButtonPressed
()
Whether the circle button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getCircleButtonReleased
public
boolean
getCircleButtonReleased
()
Whether the circle button was released since the last check.
Returns:
Whether the button was released since the last check.
circle
public
BooleanEvent
circle
(
EventLoop
loop)
Constructs an event instance around the circle button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the circle button's digital signal
     attached to the given loop.
getTriangleButton
public
boolean
getTriangleButton
()
Read the value of the triangle button on the controller.
Returns:
The state of the button.
getTriangleButtonPressed
public
boolean
getTriangleButtonPressed
()
Whether the triangle button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getTriangleButtonReleased
public
boolean
getTriangleButtonReleased
()
Whether the triangle button was released since the last check.
Returns:
Whether the button was released since the last check.
triangle
public
BooleanEvent
triangle
(
EventLoop
loop)
Constructs an event instance around the triangle button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the triangle button's digital signal
     attached to the given loop.
getL1Button
public
boolean
getL1Button
()
Read the value of the left trigger 1 button on the controller.
Returns:
The state of the button.
getL1ButtonPressed
public
boolean
getL1ButtonPressed
()
Whether the left trigger 1 button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getL1ButtonReleased
public
boolean
getL1ButtonReleased
()
Whether the left trigger 1 button was released since the last check.
Returns:
Whether the button was released since the last check.
L1
public
BooleanEvent
L1
(
EventLoop
loop)
Constructs an event instance around the left trigger 1 button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the left trigger 1 button's digital signal
     attached to the given loop.
getR1Button
public
boolean
getR1Button
()
Read the value of the right trigger 1 button on the controller.
Returns:
The state of the button.
getR1ButtonPressed
public
boolean
getR1ButtonPressed
()
Whether the right trigger 1 button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getR1ButtonReleased
public
boolean
getR1ButtonReleased
()
Whether the right trigger 1 button was released since the last check.
Returns:
Whether the button was released since the last check.
R1
public
BooleanEvent
R1
(
EventLoop
loop)
Constructs an event instance around the right trigger 1 button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the right trigger 1 button's digital signal
     attached to the given loop.
getL2Button
public
boolean
getL2Button
()
Read the value of the left trigger 2 button on the controller.
Returns:
The state of the button.
getL2ButtonPressed
public
boolean
getL2ButtonPressed
()
Whether the left trigger 2 button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getL2ButtonReleased
public
boolean
getL2ButtonReleased
()
Whether the left trigger 2 button was released since the last check.
Returns:
Whether the button was released since the last check.
L2
public
BooleanEvent
L2
(
EventLoop
loop)
Constructs an event instance around the left trigger 2 button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the left trigger 2 button's digital signal
     attached to the given loop.
getR2Button
public
boolean
getR2Button
()
Read the value of the right trigger 2 button on the controller.
Returns:
The state of the button.
getR2ButtonPressed
public
boolean
getR2ButtonPressed
()
Whether the right trigger 2 button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getR2ButtonReleased
public
boolean
getR2ButtonReleased
()
Whether the right trigger 2 button was released since the last check.
Returns:
Whether the button was released since the last check.
R2
public
BooleanEvent
R2
(
EventLoop
loop)
Constructs an event instance around the right trigger 2 button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the right trigger 2 button's digital signal
     attached to the given loop.
getCreateButton
public
boolean
getCreateButton
()
Read the value of the create button on the controller.
Returns:
The state of the button.
getCreateButtonPressed
public
boolean
getCreateButtonPressed
()
Whether the create button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getCreateButtonReleased
public
boolean
getCreateButtonReleased
()
Whether the create button was released since the last check.
Returns:
Whether the button was released since the last check.
create
public
BooleanEvent
create
(
EventLoop
loop)
Constructs an event instance around the create button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the create button's digital signal
     attached to the given loop.
getOptionsButton
public
boolean
getOptionsButton
()
Read the value of the options button on the controller.
Returns:
The state of the button.
getOptionsButtonPressed
public
boolean
getOptionsButtonPressed
()
Whether the options button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getOptionsButtonReleased
public
boolean
getOptionsButtonReleased
()
Whether the options button was released since the last check.
Returns:
Whether the button was released since the last check.
options
public
BooleanEvent
options
(
EventLoop
loop)
Constructs an event instance around the options button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the options button's digital signal
     attached to the given loop.
getL3Button
public
boolean
getL3Button
()
Read the value of the L3 (left stick) button on the controller.
Returns:
The state of the button.
getL3ButtonPressed
public
boolean
getL3ButtonPressed
()
Whether the L3 (left stick) button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getL3ButtonReleased
public
boolean
getL3ButtonReleased
()
Whether the L3 (left stick) button was released since the last check.
Returns:
Whether the button was released since the last check.
L3
public
BooleanEvent
L3
(
EventLoop
loop)
Constructs an event instance around the L3 (left stick) button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the L3 (left stick) button's digital signal
     attached to the given loop.
getR3Button
public
boolean
getR3Button
()
Read the value of the R3 (right stick) button on the controller.
Returns:
The state of the button.
getR3ButtonPressed
public
boolean
getR3ButtonPressed
()
Whether the R3 (right stick) button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getR3ButtonReleased
public
boolean
getR3ButtonReleased
()
Whether the R3 (right stick) button was released since the last check.
Returns:
Whether the button was released since the last check.
R3
public
BooleanEvent
R3
(
EventLoop
loop)
Constructs an event instance around the R3 (right stick) button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the R3 (right stick) button's digital signal
     attached to the given loop.
getPSButton
public
boolean
getPSButton
()
Read the value of the PlayStation button on the controller.
Returns:
The state of the button.
getPSButtonPressed
public
boolean
getPSButtonPressed
()
Whether the PlayStation button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getPSButtonReleased
public
boolean
getPSButtonReleased
()
Whether the PlayStation button was released since the last check.
Returns:
Whether the button was released since the last check.
PS
public
BooleanEvent
PS
(
EventLoop
loop)
Constructs an event instance around the PlayStation button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the PlayStation button's digital signal
     attached to the given loop.
getTouchpadButton
public
boolean
getTouchpadButton
()
Read the value of the touchpad button on the controller.
Returns:
The state of the button.
getTouchpadButtonPressed
public
boolean
getTouchpadButtonPressed
()
Whether the touchpad button was pressed since the last check.
Returns:
Whether the button was pressed since the last check.
getTouchpadButtonReleased
public
boolean
getTouchpadButtonReleased
()
Whether the touchpad button was released since the last check.
Returns:
Whether the button was released since the last check.
touchpad
public
BooleanEvent
touchpad
(
EventLoop
loop)
Constructs an event instance around the touchpad button's digital signal.
Parameters:
loop
- the event loop instance to attach the event to.
Returns:
an event instance representing the touchpad button's digital signal
     attached to the given loop.
getTouchpad
@Deprecated
(
since
="2025",
forRemoval
=true)
public
boolean
getTouchpad
()
Deprecated, for removal: This API element is subject to removal in a future version.
Use
getTouchpadButton()
instead. This function is deprecated for removal to
     make function names consistent to allow the HID classes to be automatically generated.
Read the value of the touchpad on the controller.
Returns:
The state of the touchpad.
getTouchpadPressed
@Deprecated
(
since
="2025",
forRemoval
=true)
public
boolean
getTouchpadPressed
()
Deprecated, for removal: This API element is subject to removal in a future version.
Use
getTouchpadButtonPressed()
instead. This function is deprecated for
     removal to make function names consistent to allow the HID classes to be automatically
     generated.
Whether the touchpad was pressed since the last check.
Returns:
Whether the touchpad was pressed since the last check.
getTouchpadReleased
@Deprecated
(
since
="2025",
forRemoval
=true)
public
boolean
getTouchpadReleased
()
Deprecated, for removal: This API element is subject to removal in a future version.
Use
getTouchpadButtonReleased()
instead. This function is deprecated for
     removal to make function names consistent to allow the HID classes to be automatically
     generated.
Whether the touchpad was released since the last check.
Returns:
Whether the touchpad was released since the last check.
initSendable
public
void
initSendable
(
SendableBuilder
builder)
Description copied from interface:
Sendable
Initializes this
Sendable
object.
Specified by:
initSendable
in interface
Sendable
Parameters:
builder
- sendable builder