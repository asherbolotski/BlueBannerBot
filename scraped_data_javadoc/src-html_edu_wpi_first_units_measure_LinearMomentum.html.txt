001
// Copyright (c) FIRST and other WPILib contributors.
002
// Open Source Software; you can modify and/or share it under the terms of
003
// the WPILib BSD license file in the root directory of this project.
004
005
// THIS FILE WAS AUTO-GENERATED BY ./wpiunits/generate_units.py. DO NOT MODIFY
006
007
package edu.wpi.first.units.measure;
008
009
import static edu.wpi.first.units.Units.*;
010
import edu.wpi.first.units.*;
011
012
@SuppressWarnings({"unchecked", "cast", "checkstyle", "PMD"})
013
public interface LinearMomentum extends Measure<LinearMomentumUnit> {
014
static  LinearMomentum ofRelativeUnits(double magnitude, LinearMomentumUnit unit) {
015
return new ImmutableLinearMomentum(magnitude, unit.toBaseUnits(magnitude), unit);
016
}
017
018
static  LinearMomentum ofBaseUnits(double baseUnitMagnitude, LinearMomentumUnit unit) {
019
return new ImmutableLinearMomentum(unit.fromBaseUnits(baseUnitMagnitude), baseUnitMagnitude, unit);
020
}
021
022
@Override
023
LinearMomentum copy();
024
025
@Override
026
default MutLinearMomentum mutableCopy() {
027
return new MutLinearMomentum(magnitude(), baseUnitMagnitude(), unit());
028
}
029
030
@Override
031
LinearMomentumUnit unit();
032
033
@Override
034
default LinearMomentumUnit baseUnit() { return (LinearMomentumUnit) unit().getBaseUnit(); }
035
036
@Override
037
default double in(LinearMomentumUnit unit) {
038
return unit.fromBaseUnits(baseUnitMagnitude());
039
}
040
041
@Override
042
default LinearMomentum unaryMinus() {
043
return (LinearMomentum) unit().ofBaseUnits(0 - baseUnitMagnitude());
044
}
045
046
/**
047
* {@inheritDoc}
048
*
049
* @deprecated use unaryMinus() instead. This was renamed for consistency with other WPILib classes like Rotation2d
050
*/
051
@Override
052
@Deprecated(since = "2025", forRemoval = true)
053
@SuppressWarnings({"deprecation", "removal"})
054
default LinearMomentum negate() {
055
return (LinearMomentum) unaryMinus();
056
}
057
058
@Override
059
default LinearMomentum plus(Measure<? extends LinearMomentumUnit> other) {
060
return (LinearMomentum) unit().ofBaseUnits(baseUnitMagnitude() + other.baseUnitMagnitude());
061
}
062
063
@Override
064
default LinearMomentum minus(Measure<? extends LinearMomentumUnit> other) {
065
return (LinearMomentum) unit().ofBaseUnits(baseUnitMagnitude() - other.baseUnitMagnitude());
066
}
067
068
@Override
069
default LinearMomentum times(double multiplier) {
070
return (LinearMomentum) unit().ofBaseUnits(baseUnitMagnitude() * multiplier);
071
}
072
073
@Override
074
default LinearMomentum div(double divisor) {
075
return (LinearMomentum) unit().ofBaseUnits(baseUnitMagnitude() / divisor);
076
}
077
078
/**
079
* {@inheritDoc}
080
*
081
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
082
*/
083
@Override
084
@Deprecated(since = "2025", forRemoval = true)
085
@SuppressWarnings({"deprecation", "removal"})
086
default LinearMomentum divide(double divisor) {
087
return (LinearMomentum) div(divisor);
088
}
089
090
091
@Override
092
default Mult<LinearMomentumUnit, AccelerationUnit<?>> times(Acceleration<?> multiplier) {
093
return (Mult<LinearMomentumUnit, AccelerationUnit<?>>) Measure.super.times(multiplier);
094
}
095
096
@Override
097
default Per<LinearMomentumUnit, AccelerationUnit<?>> div(Acceleration<?> divisor) {
098
return (Per<LinearMomentumUnit, AccelerationUnit<?>>) Measure.super.div(divisor);
099
}
100
101
/**
102
* {@inheritDoc}
103
*
104
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
105
*/
106
@Deprecated(since = "2025", forRemoval = true)
107
@SuppressWarnings({"deprecation", "removal"})
108
@Override
109
default Per<LinearMomentumUnit, AccelerationUnit<?>> divide(Acceleration<?> divisor) {
110
return div(divisor);
111
}
112
113
@Override
114
default Per<LinearMomentumUnit, AccelerationUnit<?>> per(AccelerationUnit<?> divisorUnit) {
115
return div(divisorUnit.one());
116
}
117
118
119
@Override
120
default Mult<LinearMomentumUnit, AngleUnit> times(Angle multiplier) {
121
return (Mult<LinearMomentumUnit, AngleUnit>) Measure.super.times(multiplier);
122
}
123
124
@Override
125
default Per<LinearMomentumUnit, AngleUnit> div(Angle divisor) {
126
return (Per<LinearMomentumUnit, AngleUnit>) Measure.super.div(divisor);
127
}
128
129
/**
130
* {@inheritDoc}
131
*
132
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
133
*/
134
@Deprecated(since = "2025", forRemoval = true)
135
@SuppressWarnings({"deprecation", "removal"})
136
@Override
137
default Per<LinearMomentumUnit, AngleUnit> divide(Angle divisor) {
138
return div(divisor);
139
}
140
141
@Override
142
default Per<LinearMomentumUnit, AngleUnit> per(AngleUnit divisorUnit) {
143
return div(divisorUnit.one());
144
}
145
146
147
@Override
148
default Mult<LinearMomentumUnit, AngularAccelerationUnit> times(AngularAcceleration multiplier) {
149
return (Mult<LinearMomentumUnit, AngularAccelerationUnit>) Measure.super.times(multiplier);
150
}
151
152
@Override
153
default Per<LinearMomentumUnit, AngularAccelerationUnit> div(AngularAcceleration divisor) {
154
return (Per<LinearMomentumUnit, AngularAccelerationUnit>) Measure.super.div(divisor);
155
}
156
157
/**
158
* {@inheritDoc}
159
*
160
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
161
*/
162
@Deprecated(since = "2025", forRemoval = true)
163
@SuppressWarnings({"deprecation", "removal"})
164
@Override
165
default Per<LinearMomentumUnit, AngularAccelerationUnit> divide(AngularAcceleration divisor) {
166
return div(divisor);
167
}
168
169
@Override
170
default Per<LinearMomentumUnit, AngularAccelerationUnit> per(AngularAccelerationUnit divisorUnit) {
171
return div(divisorUnit.one());
172
}
173
174
175
@Override
176
default Mult<LinearMomentumUnit, AngularMomentumUnit> times(AngularMomentum multiplier) {
177
return (Mult<LinearMomentumUnit, AngularMomentumUnit>) Measure.super.times(multiplier);
178
}
179
180
@Override
181
default Per<LinearMomentumUnit, AngularMomentumUnit> div(AngularMomentum divisor) {
182
return (Per<LinearMomentumUnit, AngularMomentumUnit>) Measure.super.div(divisor);
183
}
184
185
/**
186
* {@inheritDoc}
187
*
188
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
189
*/
190
@Deprecated(since = "2025", forRemoval = true)
191
@SuppressWarnings({"deprecation", "removal"})
192
@Override
193
default Per<LinearMomentumUnit, AngularMomentumUnit> divide(AngularMomentum divisor) {
194
return div(divisor);
195
}
196
197
@Override
198
default Per<LinearMomentumUnit, AngularMomentumUnit> per(AngularMomentumUnit divisorUnit) {
199
return div(divisorUnit.one());
200
}
201
202
203
@Override
204
default Mult<LinearMomentumUnit, AngularVelocityUnit> times(AngularVelocity multiplier) {
205
return (Mult<LinearMomentumUnit, AngularVelocityUnit>) Measure.super.times(multiplier);
206
}
207
208
@Override
209
default Per<LinearMomentumUnit, AngularVelocityUnit> div(AngularVelocity divisor) {
210
return (Per<LinearMomentumUnit, AngularVelocityUnit>) Measure.super.div(divisor);
211
}
212
213
/**
214
* {@inheritDoc}
215
*
216
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
217
*/
218
@Deprecated(since = "2025", forRemoval = true)
219
@SuppressWarnings({"deprecation", "removal"})
220
@Override
221
default Per<LinearMomentumUnit, AngularVelocityUnit> divide(AngularVelocity divisor) {
222
return div(divisor);
223
}
224
225
@Override
226
default Per<LinearMomentumUnit, AngularVelocityUnit> per(AngularVelocityUnit divisorUnit) {
227
return div(divisorUnit.one());
228
}
229
230
231
@Override
232
default Mult<LinearMomentumUnit, CurrentUnit> times(Current multiplier) {
233
return (Mult<LinearMomentumUnit, CurrentUnit>) Measure.super.times(multiplier);
234
}
235
236
@Override
237
default Per<LinearMomentumUnit, CurrentUnit> div(Current divisor) {
238
return (Per<LinearMomentumUnit, CurrentUnit>) Measure.super.div(divisor);
239
}
240
241
/**
242
* {@inheritDoc}
243
*
244
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
245
*/
246
@Deprecated(since = "2025", forRemoval = true)
247
@SuppressWarnings({"deprecation", "removal"})
248
@Override
249
default Per<LinearMomentumUnit, CurrentUnit> divide(Current divisor) {
250
return div(divisor);
251
}
252
253
@Override
254
default Per<LinearMomentumUnit, CurrentUnit> per(CurrentUnit divisorUnit) {
255
return div(divisorUnit.one());
256
}
257
258
@Override
259
default LinearMomentum div(Dimensionless divisor) {
260
return (LinearMomentum) KilogramMetersPerSecond.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
261
}
262
263
/**
264
* {@inheritDoc}
265
*
266
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
267
*/
268
@Override
269
@Deprecated(since = "2025", forRemoval = true)
270
@SuppressWarnings({"deprecation", "removal"})
271
default LinearMomentum divide(Dimensionless divisor) {
272
return (LinearMomentum) div(divisor);
273
}
274
275
@Override
276
default LinearMomentum times(Dimensionless multiplier) {
277
return (LinearMomentum) KilogramMetersPerSecond.of(baseUnitMagnitude() * multiplier.baseUnitMagnitude());
278
}
279
280
281
@Override
282
default Mult<LinearMomentumUnit, DistanceUnit> times(Distance multiplier) {
283
return (Mult<LinearMomentumUnit, DistanceUnit>) Measure.super.times(multiplier);
284
}
285
286
@Override
287
default Per<LinearMomentumUnit, DistanceUnit> div(Distance divisor) {
288
return (Per<LinearMomentumUnit, DistanceUnit>) Measure.super.div(divisor);
289
}
290
291
/**
292
* {@inheritDoc}
293
*
294
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
295
*/
296
@Deprecated(since = "2025", forRemoval = true)
297
@SuppressWarnings({"deprecation", "removal"})
298
@Override
299
default Per<LinearMomentumUnit, DistanceUnit> divide(Distance divisor) {
300
return div(divisor);
301
}
302
303
@Override
304
default Per<LinearMomentumUnit, DistanceUnit> per(DistanceUnit divisorUnit) {
305
return div(divisorUnit.one());
306
}
307
308
309
@Override
310
default Mult<LinearMomentumUnit, EnergyUnit> times(Energy multiplier) {
311
return (Mult<LinearMomentumUnit, EnergyUnit>) Measure.super.times(multiplier);
312
}
313
314
@Override
315
default Per<LinearMomentumUnit, EnergyUnit> div(Energy divisor) {
316
return (Per<LinearMomentumUnit, EnergyUnit>) Measure.super.div(divisor);
317
}
318
319
/**
320
* {@inheritDoc}
321
*
322
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
323
*/
324
@Deprecated(since = "2025", forRemoval = true)
325
@SuppressWarnings({"deprecation", "removal"})
326
@Override
327
default Per<LinearMomentumUnit, EnergyUnit> divide(Energy divisor) {
328
return div(divisor);
329
}
330
331
@Override
332
default Per<LinearMomentumUnit, EnergyUnit> per(EnergyUnit divisorUnit) {
333
return div(divisorUnit.one());
334
}
335
336
337
@Override
338
default Mult<LinearMomentumUnit, ForceUnit> times(Force multiplier) {
339
return (Mult<LinearMomentumUnit, ForceUnit>) Measure.super.times(multiplier);
340
}
341
342
@Override
343
default Per<LinearMomentumUnit, ForceUnit> div(Force divisor) {
344
return (Per<LinearMomentumUnit, ForceUnit>) Measure.super.div(divisor);
345
}
346
347
/**
348
* {@inheritDoc}
349
*
350
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
351
*/
352
@Deprecated(since = "2025", forRemoval = true)
353
@SuppressWarnings({"deprecation", "removal"})
354
@Override
355
default Per<LinearMomentumUnit, ForceUnit> divide(Force divisor) {
356
return div(divisor);
357
}
358
359
@Override
360
default Per<LinearMomentumUnit, ForceUnit> per(ForceUnit divisorUnit) {
361
return div(divisorUnit.one());
362
}
363
364
365
@Override
366
default Force times(Frequency multiplier) {
367
return Newtons.of(baseUnitMagnitude() * multiplier.baseUnitMagnitude());
368
}
369
370
@Override
371
default Per<LinearMomentumUnit, FrequencyUnit> div(Frequency divisor) {
372
return (Per<LinearMomentumUnit, FrequencyUnit>) Measure.super.div(divisor);
373
}
374
375
/**
376
* {@inheritDoc}
377
*
378
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
379
*/
380
@Deprecated(since = "2025", forRemoval = true)
381
@SuppressWarnings({"deprecation", "removal"})
382
@Override
383
default Per<LinearMomentumUnit, FrequencyUnit> divide(Frequency divisor) {
384
return div(divisor);
385
}
386
387
@Override
388
default Per<LinearMomentumUnit, FrequencyUnit> per(FrequencyUnit divisorUnit) {
389
return div(divisorUnit.one());
390
}
391
392
393
@Override
394
default Mult<LinearMomentumUnit, LinearAccelerationUnit> times(LinearAcceleration multiplier) {
395
return (Mult<LinearMomentumUnit, LinearAccelerationUnit>) Measure.super.times(multiplier);
396
}
397
398
@Override
399
default Per<LinearMomentumUnit, LinearAccelerationUnit> div(LinearAcceleration divisor) {
400
return (Per<LinearMomentumUnit, LinearAccelerationUnit>) Measure.super.div(divisor);
401
}
402
403
/**
404
* {@inheritDoc}
405
*
406
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
407
*/
408
@Deprecated(since = "2025", forRemoval = true)
409
@SuppressWarnings({"deprecation", "removal"})
410
@Override
411
default Per<LinearMomentumUnit, LinearAccelerationUnit> divide(LinearAcceleration divisor) {
412
return div(divisor);
413
}
414
415
@Override
416
default Per<LinearMomentumUnit, LinearAccelerationUnit> per(LinearAccelerationUnit divisorUnit) {
417
return div(divisorUnit.one());
418
}
419
420
421
@Override
422
default Mult<LinearMomentumUnit, LinearMomentumUnit> times(LinearMomentum multiplier) {
423
return (Mult<LinearMomentumUnit, LinearMomentumUnit>) Measure.super.times(multiplier);
424
}
425
426
@Override
427
default Dimensionless div(LinearMomentum divisor) {
428
return Value.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
429
}
430
431
/**
432
* {@inheritDoc}
433
*
434
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
435
*/
436
@Deprecated(since = "2025", forRemoval = true)
437
@SuppressWarnings({"deprecation", "removal"})
438
@Override
439
default Dimensionless divide(LinearMomentum divisor) {
440
return div(divisor);
441
}
442
443
@Override
444
default Dimensionless per(LinearMomentumUnit divisorUnit) {
445
return div(divisorUnit.one());
446
}
447
448
449
@Override
450
default Mult<LinearMomentumUnit, LinearVelocityUnit> times(LinearVelocity multiplier) {
451
return (Mult<LinearMomentumUnit, LinearVelocityUnit>) Measure.super.times(multiplier);
452
}
453
454
@Override
455
default Mass div(LinearVelocity divisor) {
456
return Kilograms.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
457
}
458
459
/**
460
* {@inheritDoc}
461
*
462
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
463
*/
464
@Override
465
@Deprecated(since = "2025", forRemoval = true)
466
@SuppressWarnings({"deprecation", "removal"})
467
default Mass divide(LinearVelocity divisor) {
468
return div(divisor);
469
}
470
471
@Override
472
default Mass per(LinearVelocityUnit divisorUnit) {
473
return div(divisorUnit.one());
474
}
475
476
477
@Override
478
default Mult<LinearMomentumUnit, MassUnit> times(Mass multiplier) {
479
return (Mult<LinearMomentumUnit, MassUnit>) Measure.super.times(multiplier);
480
}
481
482
@Override
483
default LinearVelocity div(Mass divisor) {
484
return MetersPerSecond.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
485
}
486
487
/**
488
* {@inheritDoc}
489
*
490
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
491
*/
492
@Override
493
@Deprecated(since = "2025", forRemoval = true)
494
@SuppressWarnings({"deprecation", "removal"})
495
default LinearVelocity divide(Mass divisor) {
496
return div(divisor);
497
}
498
499
@Override
500
default LinearVelocity per(MassUnit divisorUnit) {
501
return div(divisorUnit.one());
502
}
503
504
505
@Override
506
default Mult<LinearMomentumUnit, MomentOfInertiaUnit> times(MomentOfInertia multiplier) {
507
return (Mult<LinearMomentumUnit, MomentOfInertiaUnit>) Measure.super.times(multiplier);
508
}
509
510
@Override
511
default Per<LinearMomentumUnit, MomentOfInertiaUnit> div(MomentOfInertia divisor) {
512
return (Per<LinearMomentumUnit, MomentOfInertiaUnit>) Measure.super.div(divisor);
513
}
514
515
/**
516
* {@inheritDoc}
517
*
518
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
519
*/
520
@Deprecated(since = "2025", forRemoval = true)
521
@SuppressWarnings({"deprecation", "removal"})
522
@Override
523
default Per<LinearMomentumUnit, MomentOfInertiaUnit> divide(MomentOfInertia divisor) {
524
return div(divisor);
525
}
526
527
@Override
528
default Per<LinearMomentumUnit, MomentOfInertiaUnit> per(MomentOfInertiaUnit divisorUnit) {
529
return div(divisorUnit.one());
530
}
531
532
533
@Override
534
default Mult<LinearMomentumUnit, MultUnit<?, ?>> times(Mult<?, ?> multiplier) {
535
return (Mult<LinearMomentumUnit, MultUnit<?, ?>>) Measure.super.times(multiplier);
536
}
537
538
@Override
539
default Per<LinearMomentumUnit, MultUnit<?, ?>> div(Mult<?, ?> divisor) {
540
return (Per<LinearMomentumUnit, MultUnit<?, ?>>) Measure.super.div(divisor);
541
}
542
543
/**
544
* {@inheritDoc}
545
*
546
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
547
*/
548
@Deprecated(since = "2025", forRemoval = true)
549
@SuppressWarnings({"deprecation", "removal"})
550
@Override
551
default Per<LinearMomentumUnit, MultUnit<?, ?>> divide(Mult<?, ?> divisor) {
552
return div(divisor);
553
}
554
555
@Override
556
default Per<LinearMomentumUnit, MultUnit<?, ?>> per(MultUnit<?, ?> divisorUnit) {
557
return div(divisorUnit.ofNative(1));
558
}
559
560
561
@Override
562
default Mult<LinearMomentumUnit, PerUnit<?, ?>> times(Per<?, ?> multiplier) {
563
return (Mult<LinearMomentumUnit, PerUnit<?, ?>>) Measure.super.times(multiplier);
564
}
565
566
@Override
567
default Per<LinearMomentumUnit, PerUnit<?, ?>> div(Per<?, ?> divisor) {
568
return (Per<LinearMomentumUnit, PerUnit<?, ?>>) Measure.super.div(divisor);
569
}
570
571
/**
572
* {@inheritDoc}
573
*
574
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
575
*/
576
@Deprecated(since = "2025", forRemoval = true)
577
@SuppressWarnings({"deprecation", "removal"})
578
@Override
579
default Per<LinearMomentumUnit, PerUnit<?, ?>> divide(Per<?, ?> divisor) {
580
return div(divisor);
581
}
582
583
@Override
584
default Per<LinearMomentumUnit, PerUnit<?, ?>> per(PerUnit<?, ?> divisorUnit) {
585
return div(divisorUnit.ofNative(1));
586
}
587
588
589
@Override
590
default Mult<LinearMomentumUnit, PowerUnit> times(Power multiplier) {
591
return (Mult<LinearMomentumUnit, PowerUnit>) Measure.super.times(multiplier);
592
}
593
594
@Override
595
default Per<LinearMomentumUnit, PowerUnit> div(Power divisor) {
596
return (Per<LinearMomentumUnit, PowerUnit>) Measure.super.div(divisor);
597
}
598
599
/**
600
* {@inheritDoc}
601
*
602
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
603
*/
604
@Deprecated(since = "2025", forRemoval = true)
605
@SuppressWarnings({"deprecation", "removal"})
606
@Override
607
default Per<LinearMomentumUnit, PowerUnit> divide(Power divisor) {
608
return div(divisor);
609
}
610
611
@Override
612
default Per<LinearMomentumUnit, PowerUnit> per(PowerUnit divisorUnit) {
613
return div(divisorUnit.one());
614
}
615
616
617
@Override
618
default Mult<LinearMomentumUnit, ResistanceUnit> times(Resistance multiplier) {
619
return (Mult<LinearMomentumUnit, ResistanceUnit>) Measure.super.times(multiplier);
620
}
621
622
@Override
623
default Per<LinearMomentumUnit, ResistanceUnit> div(Resistance divisor) {
624
return (Per<LinearMomentumUnit, ResistanceUnit>) Measure.super.div(divisor);
625
}
626
627
/**
628
* {@inheritDoc}
629
*
630
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
631
*/
632
@Deprecated(since = "2025", forRemoval = true)
633
@SuppressWarnings({"deprecation", "removal"})
634
@Override
635
default Per<LinearMomentumUnit, ResistanceUnit> divide(Resistance divisor) {
636
return div(divisor);
637
}
638
639
@Override
640
default Per<LinearMomentumUnit, ResistanceUnit> per(ResistanceUnit divisorUnit) {
641
return div(divisorUnit.one());
642
}
643
644
645
@Override
646
default Mult<LinearMomentumUnit, TemperatureUnit> times(Temperature multiplier) {
647
return (Mult<LinearMomentumUnit, TemperatureUnit>) Measure.super.times(multiplier);
648
}
649
650
@Override
651
default Per<LinearMomentumUnit, TemperatureUnit> div(Temperature divisor) {
652
return (Per<LinearMomentumUnit, TemperatureUnit>) Measure.super.div(divisor);
653
}
654
655
/**
656
* {@inheritDoc}
657
*
658
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
659
*/
660
@Deprecated(since = "2025", forRemoval = true)
661
@SuppressWarnings({"deprecation", "removal"})
662
@Override
663
default Per<LinearMomentumUnit, TemperatureUnit> divide(Temperature divisor) {
664
return div(divisor);
665
}
666
667
@Override
668
default Per<LinearMomentumUnit, TemperatureUnit> per(TemperatureUnit divisorUnit) {
669
return div(divisorUnit.one());
670
}
671
672
673
@Override
674
default Mult<LinearMomentumUnit, TimeUnit> times(Time multiplier) {
675
return (Mult<LinearMomentumUnit, TimeUnit>) Measure.super.times(multiplier);
676
}
677
678
@Override
679
default Force div(Time divisor) {
680
return Newtons.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
681
}
682
683
/**
684
* {@inheritDoc}
685
*
686
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
687
*/
688
@Override
689
@Deprecated(since = "2025", forRemoval = true)
690
@SuppressWarnings({"deprecation", "removal"})
691
default Force divide(Time divisor) {
692
return div(divisor);
693
}
694
695
@Override
696
default Force per(TimeUnit divisorUnit) {
697
return div(divisorUnit.one());
698
}
699
700
701
@Override
702
default Mult<LinearMomentumUnit, TorqueUnit> times(Torque multiplier) {
703
return (Mult<LinearMomentumUnit, TorqueUnit>) Measure.super.times(multiplier);
704
}
705
706
@Override
707
default Per<LinearMomentumUnit, TorqueUnit> div(Torque divisor) {
708
return (Per<LinearMomentumUnit, TorqueUnit>) Measure.super.div(divisor);
709
}
710
711
/**
712
* {@inheritDoc}
713
*
714
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
715
*/
716
@Deprecated(since = "2025", forRemoval = true)
717
@SuppressWarnings({"deprecation", "removal"})
718
@Override
719
default Per<LinearMomentumUnit, TorqueUnit> divide(Torque divisor) {
720
return div(divisor);
721
}
722
723
@Override
724
default Per<LinearMomentumUnit, TorqueUnit> per(TorqueUnit divisorUnit) {
725
return div(divisorUnit.one());
726
}
727
728
729
@Override
730
default Mult<LinearMomentumUnit, VelocityUnit<?>> times(Velocity<?> multiplier) {
731
return (Mult<LinearMomentumUnit, VelocityUnit<?>>) Measure.super.times(multiplier);
732
}
733
734
@Override
735
default Per<LinearMomentumUnit, VelocityUnit<?>> div(Velocity<?> divisor) {
736
return (Per<LinearMomentumUnit, VelocityUnit<?>>) Measure.super.div(divisor);
737
}
738
739
/**
740
* {@inheritDoc}
741
*
742
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
743
*/
744
@Deprecated(since = "2025", forRemoval = true)
745
@SuppressWarnings({"deprecation", "removal"})
746
@Override
747
default Per<LinearMomentumUnit, VelocityUnit<?>> divide(Velocity<?> divisor) {
748
return div(divisor);
749
}
750
751
@Override
752
default Per<LinearMomentumUnit, VelocityUnit<?>> per(VelocityUnit<?> divisorUnit) {
753
return div(divisorUnit.one());
754
}
755
756
757
@Override
758
default Mult<LinearMomentumUnit, VoltageUnit> times(Voltage multiplier) {
759
return (Mult<LinearMomentumUnit, VoltageUnit>) Measure.super.times(multiplier);
760
}
761
762
@Override
763
default Per<LinearMomentumUnit, VoltageUnit> div(Voltage divisor) {
764
return (Per<LinearMomentumUnit, VoltageUnit>) Measure.super.div(divisor);
765
}
766
767
/**
768
* {@inheritDoc}
769
*
770
* @deprecated use div instead. This was renamed for consistency with other languages like Kotlin
771
*/
772
@Deprecated(since = "2025", forRemoval = true)
773
@SuppressWarnings({"deprecation", "removal"})
774
@Override
775
default Per<LinearMomentumUnit, VoltageUnit> divide(Voltage divisor) {
776
return div(divisor);
777
}
778
779
@Override
780
default Per<LinearMomentumUnit, VoltageUnit> per(VoltageUnit divisorUnit) {
781
return div(divisorUnit.one());
782
}
783
784
}