DUO Control System
Introduction
Getting Started with Control Hub
Connect to the Robot Controller Console
Updating Wi-Fi Settings
Connecting Driver Station to Control Hub
Wiring Diagram
Next Steps
Getting Started with Driver Hub
Adding More Motors
SPARKmini Motor Controller
Adding an Expansion Hub
Troubleshooting the Control System
General Troubleshooting
Control Hub Troubleshooting
Driver Hub Troubleshooting
Driver Hub Battery Troubleshooting
Expansion Hub Troubleshooting
Status LED Blink Codes
12V Battery Best Practices and Troubleshooting
System Overview
Control Hub Specifications
Expansion Hub Specifications
Driver Hub Specifications
Port Pinouts
Protection Features
Cables and Connectors
XT-30 - Power Cable
JST VH - Motor Power
JST PH - Sensors and RS485
Integrated Sensors
Dimensions and Important Component Locations
Updating and Managing
Managing Wi-Fi on the Control Hub
REV Hardware Client
Updating Firmware
Firmware Changelog
Updating Operating System
Control Hub Operating System Changelog
Updating Robot Controller Application
Updating Robot Controller Application via Android Studio
Updating the Driver Hub
Driver Hub OS - Change Log
Accessing Log Files
Android Studio - Deploying Code Wirelessly
Hello Robot - Intro to Blocks Programming
Welcome to Hello Robot!
Where to Program - Client vs. Browser
What is an OpMode?
Setting up a Configuration
Common Errors in Configuration
Using a Gamepad
Part 1: Tackling the Basics
Tackling the Basics Directory - Blocks
Creating an OpMode - Blocks
Programming Essentials
Programming Servos
Programming Servo Basics
Using a Gamepad with a Servo
Programming Servo Telemetry
Programming Motors
Programming Motors Basics
Programming a Motor with a Gamepad
Programming Motor Telemetry
Programming Touch Sensors
Programming Color Sensors
Color Sensor Telemetry
Detecting Color
Part 2: Robot Control
Robot Control Blocks Directory
Programming Drivetrain Motors
Arcade Style TeleOp - Blocks
Establishing Variables in Blocks
Motor Power vs. Robot Movement
Programming Arcade Drive
Arm Control - Blocks
Adding a Limit Switch
Robot Control Full Program
Part 3: Autonomous and Encoders
ElapsedTime - Blocks
ElapsedTime Setup
ElapsedTime Logic
ElapsedTime - Multiple Movements
Encoder Basics
Drivetrain Encoders - Blocks
Converting Encoder Ticks to a Distance
Moving to a Target Distance
Setting Velocity
Turning the Drivetrain Using RUN_TO_POSITION
Arm Control with Encoders - Blocks
Estimating the Position of the Arm
Calculating Target Position
Using Limits to Control Range of Motion
Part 4: Going Beyond!
Exploring Functions
Programming Mecanum - Simplified
Programming Mecanum - Refined
Hello Robot - Intro to OnBot Java Programming
Welcome to Hello Robot!
Where to Program - Client vs. Browser
What is an OpMode?
Setting up a Configuration
Common Errors in Configuration
Using a Gamepad
Part 1: Tackling the Basics
Tackling the Basics Directory - OnBot
Creating an OpMode - OnBot
Programming Essentials
Programming Servos
Programming Servo Basics
Using a Gamepad with a Servo
Programming Servo Telemetry
Programming Motors
Programming Motor Basics
Programming a Motor with a Gamepad
Programming Motor Telemetry
Programming Touch Sensors
Programming Color Sensors
Color Sensor Telemetry
Detecting Color
Part 2: Robot Control
Robot Control OnBot Java Directory
Programming Drivetrain Motors
Arcade Style TeleOp - OnBot Java
Establishing Variables in OnBot Java
Motor Power vs. Robot Movement
Programming Arcade Drive
Arm Control - OnBot Java
Adding a Limit Switch
Robot Control Full Program
Part 3: Autonomous and Encoders
ElapsedTime - OnBot Java
ElapsedTime Setup
ElapsedTime Logic
ElapsedTime - Multiple Movements
Encoder Basics
Drivetrain Encoders - OnBot Java
Converting Encoder Ticks to a Distance
Moving to a Target Distance
Setting Velocity
Turning the Drivetrain Using RUN_TO_POSITION
Arm Control with Encoders - OnBot Java
Estimating the Position of the Arm
Calculating Target Position
Using Limits to Control Range of Motion
Sensors
Introduction to Sensors
Digital
Analog
I2C
IMU
Orientating the IMU
Adding an External IMU to your Hub
Encoders
REV Motor Encoders
Through Bore Encoder
Using 3rd Party Sensors
Sensor Compatibility Chart
Useful Links
REV DUO Build System
Legacy Documentation
Configuring Your Android Devices
Expansion Hub with Android Device Robot Controller
Driver Station and Robot Controller Pairing
Wiring Diagram
Configuration
REV Hub Interface Software
Powered by GitBook
On this page
Adding a Hue Variable
Detecting Common Colors
Full Color Sensor Program
Was this helpful?
Export as PDF
We've asked our robot to gather a lot of data with the color sensor. Now let's have it use that information to output an actual color name rather than just a value!
Adding a Hue Variable
To determine the final color we will be using the reported hue value from
JavaUtil.colorToHue(colors.toColor())
. Because we'll be using hue repeatedly, let's establish it as a variable to help keep our code clean.
First we will set up "hue" as a number data type  during initialization:
Copy
@
TeleOp
public
class
HelloRobot_ColorSensor
extends
LinearOpMode
{
private
NormalizedColorSensor
test_color;
double
hue;
// <------ New code
Next, we'll define "hue" while our
opModeIsActive
using the same method as before:
Copy
while
(
opModeIsActive()
) {
telemetry
.
addData
(
"Light Detected"
,
((OpticalDistanceSensor) test_color)
.
getLightDetected
());
NormalizedRGBA
colors
=
test_color
.
getNormalizedColors
();
hue
=
JavaUtil
.
colorToHue
(
colors
.
toColor
());
// <------ New code
With our variable added, our current code should appear as follows:
Copy
@
TeleOp
public
class
HelloRobot_ColorSensor
extends
LinearOpMode
{
private
NormalizedColorSensor
test_color;
double
hue;
// <------ New code
@
Override
public
void
runOpMode
() {
test_color
=
hardwareMap
.
get
(
NormalizedColorSensor
.
class
,
"test_color"
);
​
waitForStart()
;
​
while
(
opModeIsActive()
) {
telemetry
.
addData
(
"Light Detected"
,
((OpticalDistanceSensor) test_color)
.
getLightDetected
());
NormalizedRGBA
colors
=
test_color
.
getNormalizedColors
();
hue
=
JavaUtil
.
colorToHue
(
colors
.
toColor
());
// <------ New code
//Determining the amount of red, green, and blue
telemetry
.
addData
(
"Red"
,
"%.3f"
,
colors
.
red
);
telemetry
.
addData
(
"Green"
,
"%.3f"
,
colors
.
green
);
telemetry
.
addData
(
"Blue"
,
"%.3f"
,
colors
.
blue
);
//Determining HSV and alpha
telemetry
.
addData
(
"Hue"
,
JavaUtil
.
colorToHue
(
colors
.
toColor
()));
telemetry
.
addData
(
"Saturation"
,
"%.3f"
,
JavaUtil
.
colorToSaturation
(
colors
.
toColor
()));
telemetry
.
addData
(
"Value"
,
"%.3f"
,
JavaUtil
.
colorToValue
(
colors
.
toColor
()));
telemetry
.
addData
(
"Alpha"
,
"%.3f"
,
colors
.
alpha
);
telemetry
.
update
();
}
}
}
Detecting Common Colors
Recall when we learned about using
if/else
statements while working with the touch sensor.
Let's first set up the skeleton of our if/else statement for determining different colors:
Copy
if(hue < 30){
}
else if (hue < 60) {
}
else if (hue < 90){
}
else if (hue < 150){
}
else if (hue < 225){
}
else if (hue < 350){
}
else{
}
Each check will be for a certain color that is within the specified range. For example, a color that's hue is between 90-149 should appear as green.
Within each statement let's add a
telemetry.addData
and the color for that range:
Copy
if(hue < 30){
telemetry.addData("Color", "Red");
}
else if (hue < 60) {
telemetry.addData("Color", "Orange");
}
else if (hue < 90){
telemetry.addData("Color", "Yellow");
}
else if (hue < 150){
telemetry.addData("Color", "Green");
}
else if (hue < 225){
telemetry.addData("Color", "Blue");
}
else if (hue < 350){
telemetry.addData("Color", "Purple");
}
else{
telemetry.addData("Color", "Red");
}
The exact hue values may need to be adjusted slightly, but those used above are based on the default conversion of HSV to RGB when using hue to identify color.
You'll notice that "red" is detected for values under 30 and above 350. This is intentional as red is the beginning and end of the RGB spectrum!
Full Color Sensor Program
Copy
@TeleOp
public class HelloRobot_ColorSensor extends LinearOpMode {
private NormalizedColorSensor test_color;
double hue;
@Override
public void runOpMode() {
test_color = hardwareMap.get(NormalizedColorSensor.class, "test_color");
waitForStart();
while (opModeIsActive()) {
telemetry.addData("Light Detected", ((OpticalDistanceSensor) test_color).getLightDetected());
NormalizedRGBA colors = test_color.getNormalizedColors();
hue = JavaUtil.colorToHue(colors.toColor());
//Determining the amount of red, green, and blue
telemetry.addData("Red", "%.3f", colors.red);
telemetry.addData("Green", "%.3f", colors.green);
telemetry.addData("Blue", "%.3f", colors.blue);
//Determining HSV and alpha
telemetry.addData("Hue", JavaUtil.colorToHue(colors.toColor()));
telemetry.addData("Saturation", "%.3f", JavaUtil.colorToSaturation(colors.toColor()));
telemetry.addData("Value", "%.3f", JavaUtil.colorToValue(colors.toColor()));
telemetry.addData("Alpha", "%.3f", colors.alpha);
//Using hue to detect color
if(hue < 30){
telemetry.addData("Color", "Red");
}
else if (hue < 60) {
telemetry.addData("Color", "Orange");
}
else if (hue < 90){
telemetry.addData("Color", "Yellow");
}
else if (hue < 150){
telemetry.addData("Color", "Green");
}
else if (hue < 225){
telemetry.addData("Color", "Blue");
}
else if (hue < 350){
telemetry.addData("Color", "Purple");
}
else{
telemetry.addData("Color", "Red");
}
telemetry.update();
}
}
}
Build your OpMode and give it a try! You can adjust the values as you need to better reflect the colors available or changes due to lighting in the room.
Previous
Color Sensor Telemetry
Next
Part 2: Robot Control
Last updated
2 months ago
Was this helpful?