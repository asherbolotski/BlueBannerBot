REVLib - C++
BaseConfig.h
Go to the documentation of this file.
1
/*
2
* Copyright (c) 2024 REV Robotics
3
*
4
* Redistribution and use in source and binary forms, with or without
5
* modification, are permitted provided that the following conditions are met:
6
*
7
* 1. Redistributions of source code must retain the above copyright notice,
8
*    this list of conditions and the following disclaimer.
9
* 2. Redistributions in binary form must reproduce the above copyright
10
*    notice, this list of conditions and the following disclaimer in the
11
*    documentation and/or other materials provided with the distribution.
12
* 3. Neither the name of REV Robotics nor the names of its
13
*    contributors may be used to endorse or promote products derived from
14
*    this software without specific prior written permission.
15
*
16
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
17
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
18
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
19
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
20
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
21
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
22
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
23
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
24
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
25
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
26
* POSSIBILITY OF SUCH DAMAGE.
27
*/
28
29
#pragma once
30
31
#include <stdint.h>
32
33
#include <optional>
34
#include <string>
35
#include <unordered_map>
36
#include <variant>
37
38
namespace
rev
{
39
40
class
BaseConfig
{
41
public
:
42
virtual
~BaseConfig
() =
default
;
43
44
virtual
std::string
Flatten
();
45
46
protected
:
47
BaseConfig
() =
default
;
48
49
BaseConfig
(
const
BaseConfig
&) =
delete
;
50
BaseConfig
&
operator=
(
const
BaseConfig
&) =
delete
;
51
BaseConfig
(
BaseConfig
&&) noexcept = delete;
52
BaseConfig
& operator=(
BaseConfig
&&) noexcept = delete;
53
54
using
REVLibConfig_t
= std::variant<int32_t, uint32_t,
float
,
bool
>;
55
56
template <typename ConfigType>
57
void
PutParameter
(uint8_t parameterId, ConfigType value) {
58
m_Parameters[parameterId] = value;
59
}
60
61
std::optional<REVLibConfig_t>
GetParameter
(uint8_t parameterId);
62
63
static
std::optional<REVLibConfig_t>
GetParameter
(
BaseConfig
& fromConfig,
64
uint8_t parameterId);
65
66
void
RemoveParameter
(uint8_t parameterId);
67
68
static
void
RemoveParameter
(
BaseConfig
& fromConfig, uint8_t parameterId);
69
70
void
Apply
(
BaseConfig
& config);
71
72
private
:
73
std::unordered_map<uint8_t, REVLibConfig_t> m_Parameters;
74
};
// class BaseConfig
75
76
}
// namespace rev
rev::BaseConfig
Definition:
BaseConfig.h:40
rev::BaseConfig::REVLibConfig_t
std::variant< int32_t, uint32_t, float, bool > REVLibConfig_t
Definition:
BaseConfig.h:54
rev::BaseConfig::RemoveParameter
void RemoveParameter(uint8_t parameterId)
Definition:
BaseConfig.cpp:100
rev::BaseConfig::operator=
BaseConfig & operator=(const BaseConfig &)=delete
rev::BaseConfig::~BaseConfig
virtual ~BaseConfig()=default
rev::BaseConfig::Flatten
virtual std::string Flatten()
Definition:
BaseConfig.cpp:53
rev::BaseConfig::BaseConfig
BaseConfig(const BaseConfig &)=delete
rev::BaseConfig::GetParameter
std::optional< REVLibConfig_t > GetParameter(uint8_t parameterId)
Definition:
BaseConfig.cpp:85
rev::BaseConfig::Apply
void Apply(BaseConfig &config)
Definition:
BaseConfig.cpp:108
rev::BaseConfig::BaseConfig
BaseConfig()=default
rev::BaseConfig::BaseConfig
BaseConfig(BaseConfig &&) noexcept=delete
rev::BaseConfig::PutParameter
void PutParameter(uint8_t parameterId, ConfigType value)
Definition:
BaseConfig.h:57
rev
Definition:
SparkLowLevel.cpp:40
src
main
native
include
rev
config
BaseConfig.h
Generated by
1.9.2