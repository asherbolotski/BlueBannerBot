DUO Control System
Introduction
Getting Started with Control Hub
Connect to the Robot Controller Console
Updating Wi-Fi Settings
Connecting Driver Station to Control Hub
Wiring Diagram
Next Steps
Getting Started with Driver Hub
Adding More Motors
SPARKmini Motor Controller
Adding an Expansion Hub
Troubleshooting the Control System
General Troubleshooting
Control Hub Troubleshooting
Driver Hub Troubleshooting
Driver Hub Battery Troubleshooting
Expansion Hub Troubleshooting
Status LED Blink Codes
12V Battery Best Practices and Troubleshooting
System Overview
Control Hub Specifications
Expansion Hub Specifications
Driver Hub Specifications
Port Pinouts
Protection Features
Cables and Connectors
XT-30 - Power Cable
JST VH - Motor Power
JST PH - Sensors and RS485
Integrated Sensors
Dimensions and Important Component Locations
Updating and Managing
Managing Wi-Fi on the Control Hub
REV Hardware Client
Updating Firmware
Firmware Changelog
Updating Operating System
Control Hub Operating System Changelog
Updating Robot Controller Application
Updating Robot Controller Application via Android Studio
Updating the Driver Hub
Driver Hub OS - Change Log
Accessing Log Files
Android Studio - Deploying Code Wirelessly
Hello Robot - Intro to Blocks Programming
Welcome to Hello Robot!
Where to Program - Client vs. Browser
What is an OpMode?
Setting up a Configuration
Common Errors in Configuration
Using a Gamepad
Part 1: Tackling the Basics
Tackling the Basics Directory - Blocks
Creating an OpMode - Blocks
Programming Essentials
Programming Servos
Programming Servo Basics
Using a Gamepad with a Servo
Programming Servo Telemetry
Programming Motors
Programming Motors Basics
Programming a Motor with a Gamepad
Programming Motor Telemetry
Programming Touch Sensors
Programming Color Sensors
Color Sensor Telemetry
Detecting Color
Part 2: Robot Control
Robot Control Blocks Directory
Programming Drivetrain Motors
Arcade Style TeleOp - Blocks
Establishing Variables in Blocks
Motor Power vs. Robot Movement
Programming Arcade Drive
Arm Control - Blocks
Adding a Limit Switch
Robot Control Full Program
Part 3: Autonomous and Encoders
ElapsedTime - Blocks
ElapsedTime Setup
ElapsedTime Logic
ElapsedTime - Multiple Movements
Encoder Basics
Drivetrain Encoders - Blocks
Converting Encoder Ticks to a Distance
Moving to a Target Distance
Setting Velocity
Turning the Drivetrain Using RUN_TO_POSITION
Arm Control with Encoders - Blocks
Estimating the Position of the Arm
Calculating Target Position
Using Limits to Control Range of Motion
Part 4: Going Beyond!
Exploring Functions
Programming Mecanum - Simplified
Programming Mecanum - Refined
Hello Robot - Intro to OnBot Java Programming
Welcome to Hello Robot!
Where to Program - Client vs. Browser
What is an OpMode?
Setting up a Configuration
Common Errors in Configuration
Using a Gamepad
Part 1: Tackling the Basics
Tackling the Basics Directory - OnBot
Creating an OpMode - OnBot
Programming Essentials
Programming Servos
Programming Servo Basics
Using a Gamepad with a Servo
Programming Servo Telemetry
Programming Motors
Programming Motor Basics
Programming a Motor with a Gamepad
Programming Motor Telemetry
Programming Touch Sensors
Programming Color Sensors
Color Sensor Telemetry
Detecting Color
Part 2: Robot Control
Robot Control OnBot Java Directory
Programming Drivetrain Motors
Arcade Style TeleOp - OnBot Java
Establishing Variables in OnBot Java
Motor Power vs. Robot Movement
Programming Arcade Drive
Arm Control - OnBot Java
Adding a Limit Switch
Robot Control Full Program
Part 3: Autonomous and Encoders
ElapsedTime - OnBot Java
ElapsedTime Setup
ElapsedTime Logic
ElapsedTime - Multiple Movements
Encoder Basics
Drivetrain Encoders - OnBot Java
Converting Encoder Ticks to a Distance
Moving to a Target Distance
Setting Velocity
Turning the Drivetrain Using RUN_TO_POSITION
Arm Control with Encoders - OnBot Java
Estimating the Position of the Arm
Calculating Target Position
Using Limits to Control Range of Motion
Sensors
Introduction to Sensors
Digital
Analog
I2C
IMU
Orientating the IMU
Adding an External IMU to your Hub
Encoders
REV Motor Encoders
Through Bore Encoder
Using 3rd Party Sensors
Sensor Compatibility Chart
Useful Links
REV DUO Build System
Legacy Documentation
Configuring Your Android Devices
Expansion Hub with Android Device Robot Controller
Driver Station and Robot Controller Pairing
Wiring Diagram
Configuration
REV Hub Interface Software
Powered by GitBook
On this page
Installing the Driver Station Application
Android Developer Options
Driver Station Application
Renaming Your Smartphone
Was this helpful?
Export as PDF
When using Android Phones as your Robot Controller and Driver Station devices, there are several steps you need to take in order to get the phones up and running. This section will go through the process of installing a Driver Station and Robot Controller application onto a phone using the REV Hardware Client, as well as the process for renaming your Wi-Fi direct network.
For information on how to pair a configured Android phone with a Control Hub please see our
Driver Station Pairing to Control Hub
article in the Getting Started with Control Hub section.
Installing the Driver Station Application
Android Developer Options
In order to install the Driver Station Application onto and Android phone, the phone's developer settings and USB debugging options need to be turned on.
The developer options on Android Devices are hidden within the phone as a default. Different phone manufactures have different ways of accessing the developer options. However, once the developer options are available in the phone's settings, the steps for activating USB debugging and development settings are similar.
Before moving forward it is advised to look up where the developer options on your Android Device are located. For Motorola users, the
Motorola Support Page
has information on how to unlock the developer options.
Open the Android Devices settings
Scroll to the bottom of the settings, where the unlocked developer options are available. Open the developer options
At the top of the developer options page is an on/off switch. Turn the developer options on.
The device will open a confirmation message. Select 'OK.'
Scroll through the developer options until you find the Debugging section. Turn USB Debugging on.
Another confirmation message will appear, click 'OK.'
USB debugging is now on! You can move on to the steps for installing the application.
Driver Station Application
The following steps will go through how to install the Driver Station Application via the REV Hardware Client. It is possible to install the application via the app store or via the
FTC GitHub repository
as well.
Connect the Android Device to a PC with the
REV Hardware Client
installed.
Startup the REV Hardware Client. Once the Android Device is fully connected it will show up on the front page of the UI under the
Hardware Tab
. Select the Android Device.
After selecting the Connected Hardware the Update tab will pop up.  Under
Driver Station App
select Download.
Once the Driver Station App has downloaded, select Install.
When the application installation has completed the status for the Driver Station App will change to "Up-to-Date."
Renaming Your Smartphone
Part of the process for configuring your Android Device is changing the Wi-Fi Direct network. The intent of this process is to give your Robot Controller and Driver Station phones an identifiable and unique network name. This is a general best practice when working with networks, but is also a requirement for FIRST programs.
FIRST has specific naming convention requirements for Robot Controllers and Driver Stations. Please check your programs game manual for more information on what you need to name your devices.
Before moving forward it is advised to look up where the Wi-Fi direct options on your Android Device are located. This guide goes over where to make this change on the Moto E5.
Locate settings in the application list for your Android Device. Select the settings application
In the settings application, look for the
Wi-Fi
or
Network & Internet settings
and select it.
Note:
the naming convention for the network settings will vary depending on device model and manufacturer
In the network settings on Moto E5, scroll to the bottom and look for
Wi-Fi preferences
. Select Wi-Fi preferences.
Note:
on other phone models Wi-Fi Direct settings will likley be found in a different place. Please look up the Wi-Fi direct information for your phone model.
In
Wi-Fi preferences
select
Advanced
.
Select
Wi-Fi Direct
.
In the
Wi-Fi Direct
settings select the three vertical dots in the upper right hand corner.
Select
Configure device
.
Change the name of your device to something unique and identifiable. For this example the device has been renamed to REVDemo_DS. It is also good to check the
Wi-Fi Direct Inactivity timeout
and confirm it is set to
Never disconnect
. Hit 'save' to confirm your changes.
Note: If you are competing in robotics competitions you may need to follow a Wi-Fi Direct naming convention set by the competition rules. Check any relative documentation to confirm that you are following the correct naming convention.
Previous
Sensor Compatibility Chart
Next
Expansion Hub with Android Device Robot Controller
Last updated
3 years ago
Was this helpful?