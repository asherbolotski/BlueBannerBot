REVLib - C++
SparkAnalogSensor.h
Go to the documentation of this file.
1
/*
2
* Copyright (c) 2021-2025 REV Robotics
3
*
4
* Redistribution and use in source and binary forms, with or without
5
* modification, are permitted provided that the following conditions are met:
6
*
7
* 1. Redistributions of source code must retain the above copyright notice,
8
*    this list of conditions and the following disclaimer.
9
* 2. Redistributions in binary form must reproduce the above copyright
10
*    notice, this list of conditions and the following disclaimer in the
11
*    documentation and/or other materials provided with the distribution.
12
* 3. Neither the name of REV Robotics nor the names of its
13
*    contributors may be used to endorse or promote products derived from
14
*    this software without specific prior written permission.
15
*
16
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
17
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
18
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
19
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
20
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
21
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
22
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
23
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
24
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
25
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
26
* POSSIBILITY OF SUCH DAMAGE.
27
*/
28
29
#pragma once
30
31
#ifdef _MSC_VER
32
// Disable deprecation warnings for this file when using VS compiler
33
#pragma warning(disable : 4996)
34
#endif
35
36
#ifdef __GNUC__
37
#pragma GCC diagnostic push
38
#pragma GCC diagnostic ignored "-Wdeprecated"
39
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
40
#endif
41
42
#include <stdint.h>
43
44
#include "
rev/AnalogInput.h
"
45
#include "
rev/REVLibError.h
"
46
47
namespace
rev::spark
{
48
49
class
SparkBase;
50
51
class
SparkAnalogSensor
:
public
AnalogInput
{
52
friend
class
SparkBase
;
53
54
public
:
55
SparkAnalogSensor
(
SparkAnalogSensor
&&) =
default
;
56
SparkAnalogSensor
&
operator=
(
SparkAnalogSensor
&&) =
default
;
57
58
SparkAnalogSensor
(
const
SparkAnalogSensor
& rhs) =
default
;
59
60
~SparkAnalogSensor
()
override
=
default
;
61
67
double
GetVoltage
()
const override
;
68
76
double
GetPosition
()
const override
;
77
85
double
GetVelocity
()
const
;
86
87
private
:
88
SparkBase
* m_device;
89
90
explicit
SparkAnalogSensor
(
SparkBase
& device);
91
96
void
SetSimVoltage(
double
voltage);
97
102
void
SetSimPosition(
double
position);
103
108
void
SetSimVelocity(
double
velocity);
109
};
110
111
}
// namespace rev::spark
112
113
#ifdef __GNUC__
114
#pragma GCC diagnostic pop
115
#endif
AnalogInput.h
REVLibError.h
rev::AnalogInput
Definition:
AnalogInput.h:41
rev::spark::SparkAnalogSensor
Definition:
SparkAnalogSensor.h:51
rev::spark::SparkAnalogSensor::~SparkAnalogSensor
~SparkAnalogSensor() override=default
rev::spark::SparkAnalogSensor::GetVoltage
double GetVoltage() const override
Definition:
SparkAnalogSensor.cpp:56
rev::spark::SparkAnalogSensor::operator=
SparkAnalogSensor & operator=(SparkAnalogSensor &&)=default
rev::spark::SparkAnalogSensor::SparkAnalogSensor
SparkAnalogSensor(const SparkAnalogSensor &rhs)=default
rev::spark::SparkAnalogSensor::GetVelocity
double GetVelocity() const
Definition:
SparkAnalogSensor.cpp:49
rev::spark::SparkAnalogSensor::GetPosition
double GetPosition() const override
Definition:
SparkAnalogSensor.cpp:42
rev::spark::SparkAnalogSensor::SparkAnalogSensor
SparkAnalogSensor(SparkAnalogSensor &&)=default
rev::spark::SparkBase
Definition:
SparkBase.h:58
rev::spark
Definition:
SparkLowLevel.cpp:40
src
main
native
include
rev
SparkAnalogSensor.h
Generated by
1.9.2