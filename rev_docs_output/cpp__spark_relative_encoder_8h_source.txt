REVLib - C++
SparkRelativeEncoder.h
Go to the documentation of this file.
1
/*
2
* Copyright (c) 2021-2025 REV Robotics
3
*
4
* Redistribution and use in source and binary forms, with or without
5
* modification, are permitted provided that the following conditions are met:
6
*
7
* 1. Redistributions of source code must retain the above copyright notice,
8
*    this list of conditions and the following disclaimer.
9
* 2. Redistributions in binary form must reproduce the above copyright
10
*    notice, this list of conditions and the following disclaimer in the
11
*    documentation and/or other materials provided with the distribution.
12
* 3. Neither the name of REV Robotics nor the names of its
13
*    contributors may be used to endorse or promote products derived from
14
*    this software without specific prior written permission.
15
*
16
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
17
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
18
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
19
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
20
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
21
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
22
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
23
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
24
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
25
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
26
* POSSIBILITY OF SUCH DAMAGE.
27
*/
28
29
#pragma once
30
31
#include <stdint.h>
32
33
#include <atomic>
34
35
#include "
rev/REVLibError.h
"
36
#include "
rev/RelativeEncoder.h
"
37
38
namespace
rev::spark
{
39
40
class
SparkBase;
41
46
class
SparkRelativeEncoder
:
public
RelativeEncoder
{
47
// Friend to allow construction
48
friend
class
SparkBase
;
49
50
public
:
51
SparkRelativeEncoder
(
SparkRelativeEncoder
&& rhs) =
default
;
52
SparkRelativeEncoder
&
operator=
(
SparkRelativeEncoder
&& rhs) =
default
;
53
54
SparkRelativeEncoder
(
const
SparkRelativeEncoder
& rhs) =
default
;
55
56
~SparkRelativeEncoder
()
override
=
default
;
57
66
double
GetPosition
()
const override
;
67
76
double
GetVelocity
()
const override
;
77
85
REVLibError
SetPosition
(
double
position)
override
;
86
87
private
:
88
SparkBase
* m_device;
89
90
explicit
SparkRelativeEncoder
(
SparkBase
& device);
91
};
92
93
}
// namespace rev::spark
REVLibError.h
RelativeEncoder.h
rev::RelativeEncoder
Definition:
RelativeEncoder.h:50
rev::spark::SparkBase
Definition:
SparkBase.h:58
rev::spark::SparkRelativeEncoder
Definition:
SparkRelativeEncoder.h:46
rev::spark::SparkRelativeEncoder::SetPosition
REVLibError SetPosition(double position) override
Definition:
SparkRelativeEncoder.cpp:59
rev::spark::SparkRelativeEncoder::GetPosition
double GetPosition() const override
Definition:
SparkRelativeEncoder.cpp:44
rev::spark::SparkRelativeEncoder::SparkRelativeEncoder
SparkRelativeEncoder(const SparkRelativeEncoder &rhs)=default
rev::spark::SparkRelativeEncoder::SparkRelativeEncoder
SparkRelativeEncoder(SparkRelativeEncoder &&rhs)=default
rev::spark::SparkRelativeEncoder::GetVelocity
double GetVelocity() const override
Definition:
SparkRelativeEncoder.cpp:52
rev::spark::SparkRelativeEncoder::~SparkRelativeEncoder
~SparkRelativeEncoder() override=default
rev::spark::SparkRelativeEncoder::operator=
SparkRelativeEncoder & operator=(SparkRelativeEncoder &&rhs)=default
rev::spark
Definition:
SparkLowLevel.cpp:40
rev::REVLibError
REVLibError
Definition:
REVLibError.h:33
src
main
native
include
rev
SparkRelativeEncoder.h
Generated by
1.9.2