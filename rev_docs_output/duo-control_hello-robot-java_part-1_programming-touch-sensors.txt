DUO Control System
Introduction
Getting Started with Control Hub
Connect to the Robot Controller Console
Updating Wi-Fi Settings
Connecting Driver Station to Control Hub
Wiring Diagram
Next Steps
Getting Started with Driver Hub
Adding More Motors
SPARKmini Motor Controller
Adding an Expansion Hub
Troubleshooting the Control System
General Troubleshooting
Control Hub Troubleshooting
Driver Hub Troubleshooting
Driver Hub Battery Troubleshooting
Expansion Hub Troubleshooting
Status LED Blink Codes
12V Battery Best Practices and Troubleshooting
System Overview
Control Hub Specifications
Expansion Hub Specifications
Driver Hub Specifications
Port Pinouts
Protection Features
Cables and Connectors
XT-30 - Power Cable
JST VH - Motor Power
JST PH - Sensors and RS485
Integrated Sensors
Dimensions and Important Component Locations
Updating and Managing
Managing Wi-Fi on the Control Hub
REV Hardware Client
Updating Firmware
Firmware Changelog
Updating Operating System
Control Hub Operating System Changelog
Updating Robot Controller Application
Updating Robot Controller Application via Android Studio
Updating the Driver Hub
Driver Hub OS - Change Log
Accessing Log Files
Android Studio - Deploying Code Wirelessly
Hello Robot - Intro to Blocks Programming
Welcome to Hello Robot!
Where to Program - Client vs. Browser
What is an OpMode?
Setting up a Configuration
Common Errors in Configuration
Using a Gamepad
Part 1: Tackling the Basics
Tackling the Basics Directory - Blocks
Creating an OpMode - Blocks
Programming Essentials
Programming Servos
Programming Servo Basics
Using a Gamepad with a Servo
Programming Servo Telemetry
Programming Motors
Programming Motors Basics
Programming a Motor with a Gamepad
Programming Motor Telemetry
Programming Touch Sensors
Programming Color Sensors
Color Sensor Telemetry
Detecting Color
Part 2: Robot Control
Robot Control Blocks Directory
Programming Drivetrain Motors
Arcade Style TeleOp - Blocks
Establishing Variables in Blocks
Motor Power vs. Robot Movement
Programming Arcade Drive
Arm Control - Blocks
Adding a Limit Switch
Robot Control Full Program
Part 3: Autonomous and Encoders
ElapsedTime - Blocks
ElapsedTime Setup
ElapsedTime Logic
ElapsedTime - Multiple Movements
Encoder Basics
Drivetrain Encoders - Blocks
Converting Encoder Ticks to a Distance
Moving to a Target Distance
Setting Velocity
Turning the Drivetrain Using RUN_TO_POSITION
Arm Control with Encoders - Blocks
Estimating the Position of the Arm
Calculating Target Position
Using Limits to Control Range of Motion
Part 4: Going Beyond!
Exploring Functions
Programming Mecanum - Simplified
Programming Mecanum - Refined
Hello Robot - Intro to OnBot Java Programming
Welcome to Hello Robot!
Where to Program - Client vs. Browser
What is an OpMode?
Setting up a Configuration
Common Errors in Configuration
Using a Gamepad
Part 1: Tackling the Basics
Tackling the Basics Directory - OnBot
Creating an OpMode - OnBot
Programming Essentials
Programming Servos
Programming Servo Basics
Using a Gamepad with a Servo
Programming Servo Telemetry
Programming Motors
Programming Motor Basics
Programming a Motor with a Gamepad
Programming Motor Telemetry
Programming Touch Sensors
Programming Color Sensors
Color Sensor Telemetry
Detecting Color
Part 2: Robot Control
Robot Control OnBot Java Directory
Programming Drivetrain Motors
Arcade Style TeleOp - OnBot Java
Establishing Variables in OnBot Java
Motor Power vs. Robot Movement
Programming Arcade Drive
Arm Control - OnBot Java
Adding a Limit Switch
Robot Control Full Program
Part 3: Autonomous and Encoders
ElapsedTime - OnBot Java
ElapsedTime Setup
ElapsedTime Logic
ElapsedTime - Multiple Movements
Encoder Basics
Drivetrain Encoders - OnBot Java
Converting Encoder Ticks to a Distance
Moving to a Target Distance
Setting Velocity
Turning the Drivetrain Using RUN_TO_POSITION
Arm Control with Encoders - OnBot Java
Estimating the Position of the Arm
Calculating Target Position
Using Limits to Control Range of Motion
Sensors
Introduction to Sensors
Digital
Analog
I2C
IMU
Orientating the IMU
Adding an External IMU to your Hub
Encoders
REV Motor Encoders
Through Bore Encoder
Using 3rd Party Sensors
Sensor Compatibility Chart
Useful Links
REV DUO Build System
Legacy Documentation
Configuring Your Android Devices
Expansion Hub with Android Device Robot Controller
Driver Station and Robot Controller Pairing
Wiring Diagram
Configuration
REV Hub Interface Software
Powered by GitBook
On this page
Touch Sensor Basics
Adding Telemetry
Touch Sensor as a Limit Switch
Reversing it
Was this helpful?
Export as PDF
This section applies to the use of the REV
Touch Sensor
or
Limit Switch
. Requirements may vary when using other 3rd party touch sensors.
The REV Touch Sensor must be configured to digital port 1, 3, 5, or 7.
Touch Sensor Basics
The following example code's file name is: HelloRobot_TouchSensor
Let's start by breaking down how a touch sensor works at its core!
The information collected by a touch sensor comes in two states, also known as binary states. This information is perfect to use with a conditional statement like an
if/else
statement.
The line
test_touch.isPressed();
collects the binary
TRUE/FALSE
state from the touch sensor and acts as the condition for the
if/else
statement.
Copy
if
(
test_touch
.
isPressed
()){
//Touch Sensor is pressed
}
else
{
//Touch Sensor is not pressed
}
The code above highlights the basics structure of the
if/else
s
tatement for a touch sensor. We could read this line of code as "If the touch sensor is pressed do ____, else if the touch sensor is not pressed do _____."
So with this in mind:
Touch sensor pressed = true
Touch sensor NOT pressed = false
Adding Telemetry
It's always helpful for us to be able to see what the robot thinks its doing on our Driver Hub's screen. To do this let's request the robot shares some telemetry data while our program is active.
Within our if/else statement we'll add a telemetry.addData for whether the touch sensor is pressed or not.
Copy
if (test_touch.isPressed()){
//Touch Sensor is pressed.
telemetry.addData("Touch Sensor", "Is Pressed");
} else {
//Touch Sensor is not pressed
telemetry.addData("Touch Sensor", "Is Not Pressed");
}
How our robot displays this data back to our Driver Hub is up to us to define. In this case we would see something similar to the following when the touch sensor is pressed:
The blue text within our quotation marks controls what will show on the Driver Hub. With that in mind we could have the robot say "Hello World!" when the button is pressed:
To finish our program before testing we need to add a telemetry.update(); after our if/else statement to request our robot updates the telemetry each time it loops:
Copy
// Wait for the game to start (driver presses PLAY)
waitForStart();
// run until the end of the match (driver presses STOP)
while (opModeIsActive()) {
if (test_touch.isPressed()){
//Touch Sensor is pressed.
telemetry.addData("Touch Sensor", "Is Pressed");
} else {
//Touch Sensor is not pressed
telemetry.addData("Touch Sensor", "Is Not Pressed");
}
telemetry.update();
}
Touch Sensor as a Limit Switch
At the moment, our robot does not have any senses to help navigate the world around it like you might. However, that's the key advantage to adding sensors to our design.
For the touch sensor, one of the most common uses is for it to act as a
limit switch
. This will help the robot know when it needs to halt the movement of a mechanism, like an arm or lift, that's at its limit similar to how your nerves help to tell your brain to do the same.
We can test this idea by adding on to our existing if/else statement. This time we are going to ask our motor to move until our sensor is pressed:
Copy
if (test_touch.isPressed()){
//Touch Sensor is pressed
test_motor.setPower(0);
telemetry.addData("Touch Sensor", "Is Pressed");
} else {
//Touch Sensor is not pressed
test_motor.setPower(0.3);
telemetry.addData("Touch Sensor", "Is Not Pressed");
}
Test it out! What happens when you test your program?
You'll learn more about how to use this with a completed arm in Part 2: Robot Control!
Click to view full code!
Copy
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
@TeleOp
public class HelloRobot_TouchSensor extends LinearOpMode {
TouchSensor test_touch;  // Touch sensor Object
private DcMotor test_motor = null;
private Servo test_servo = null;
@Override
public void runOpMode() {
test_motor = hardwareMap.get(DcMotor.class, "test_motor");
test_servo = hardwareMap.get(Servo.class, "test_servo");
test_touch = hardwareMap.get(TouchSensor.class, "test_touch");
// Wait for the game to start (driver presses PLAY)
waitForStart();
// run until the end of the match (driver presses STOP)
while (opModeIsActive()) {
if (test_touch.isPressed()){
//Touch Sensor is pressed.
test_motor.setPower(0);
telemetry.addData("Touch Sensor", "Is Pressed");
} else {
//Touch Sensor is not pressed
test_motor.setPower(0.3);
telemetry.addData("Touch Sensor", "Is Not Pressed");
}
telemetry.update();
}
}
}
Reversing it
In the above example the
if/else
is checking first for if the touch sensor is pressed. The full statement could be read as "If the touch sensor is pressed set the motor's power to 0 else, if it is not pressed, set the power to 0.3". This statement can be reversed by adding a ! before test_touch.isPressed().
Copy
if (!test_touch.isPressed()){
//Touch Sensor is not pressed
test_motor.setPower(0.3);
telemetry.addData("Touch Sensor", "Is Not Pressed");
} else {
//Touch Sensor is pressed
test_motor.setPower(0);
telemetry.addData("Touch Sensor", "Is Pressed");
}
In OnBot Java the operator ! tells the code to look for the opposite or to "not" be what is being called. So in this instance our if/else statement is checking if the touch sensor is NOT pressed first.
Give it a try!
Previous
Programming Motor Telemetry
Next
Programming Color Sensors
Last updated
2 months ago
Was this helpful?