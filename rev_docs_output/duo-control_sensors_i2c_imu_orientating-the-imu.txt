DUO Control System
Introduction
Getting Started with Control Hub
Connect to the Robot Controller Console
Updating Wi-Fi Settings
Connecting Driver Station to Control Hub
Wiring Diagram
Next Steps
Getting Started with Driver Hub
Adding More Motors
SPARKmini Motor Controller
Adding an Expansion Hub
Troubleshooting the Control System
General Troubleshooting
Control Hub Troubleshooting
Driver Hub Troubleshooting
Driver Hub Battery Troubleshooting
Expansion Hub Troubleshooting
Status LED Blink Codes
12V Battery Best Practices and Troubleshooting
System Overview
Control Hub Specifications
Expansion Hub Specifications
Driver Hub Specifications
Port Pinouts
Protection Features
Cables and Connectors
XT-30 - Power Cable
JST VH - Motor Power
JST PH - Sensors and RS485
Integrated Sensors
Dimensions and Important Component Locations
Updating and Managing
Managing Wi-Fi on the Control Hub
REV Hardware Client
Updating Firmware
Firmware Changelog
Updating Operating System
Control Hub Operating System Changelog
Updating Robot Controller Application
Updating Robot Controller Application via Android Studio
Updating the Driver Hub
Driver Hub OS - Change Log
Accessing Log Files
Android Studio - Deploying Code Wirelessly
Hello Robot - Intro to Blocks Programming
Welcome to Hello Robot!
Where to Program - Client vs. Browser
What is an OpMode?
Setting up a Configuration
Common Errors in Configuration
Using a Gamepad
Part 1: Tackling the Basics
Tackling the Basics Directory - Blocks
Creating an OpMode - Blocks
Programming Essentials
Programming Servos
Programming Servo Basics
Using a Gamepad with a Servo
Programming Servo Telemetry
Programming Motors
Programming Motors Basics
Programming a Motor with a Gamepad
Programming Motor Telemetry
Programming Touch Sensors
Programming Color Sensors
Color Sensor Telemetry
Detecting Color
Part 2: Robot Control
Robot Control Blocks Directory
Programming Drivetrain Motors
Arcade Style TeleOp - Blocks
Establishing Variables in Blocks
Motor Power vs. Robot Movement
Programming Arcade Drive
Arm Control - Blocks
Adding a Limit Switch
Robot Control Full Program
Part 3: Autonomous and Encoders
ElapsedTime - Blocks
ElapsedTime Setup
ElapsedTime Logic
ElapsedTime - Multiple Movements
Encoder Basics
Drivetrain Encoders - Blocks
Converting Encoder Ticks to a Distance
Moving to a Target Distance
Setting Velocity
Turning the Drivetrain Using RUN_TO_POSITION
Arm Control with Encoders - Blocks
Estimating the Position of the Arm
Calculating Target Position
Using Limits to Control Range of Motion
Part 4: Going Beyond!
Exploring Functions
Programming Mecanum - Simplified
Programming Mecanum - Refined
Hello Robot - Intro to OnBot Java Programming
Welcome to Hello Robot!
Where to Program - Client vs. Browser
What is an OpMode?
Setting up a Configuration
Common Errors in Configuration
Using a Gamepad
Part 1: Tackling the Basics
Tackling the Basics Directory - OnBot
Creating an OpMode - OnBot
Programming Essentials
Programming Servos
Programming Servo Basics
Using a Gamepad with a Servo
Programming Servo Telemetry
Programming Motors
Programming Motor Basics
Programming a Motor with a Gamepad
Programming Motor Telemetry
Programming Touch Sensors
Programming Color Sensors
Color Sensor Telemetry
Detecting Color
Part 2: Robot Control
Robot Control OnBot Java Directory
Programming Drivetrain Motors
Arcade Style TeleOp - OnBot Java
Establishing Variables in OnBot Java
Motor Power vs. Robot Movement
Programming Arcade Drive
Arm Control - OnBot Java
Adding a Limit Switch
Robot Control Full Program
Part 3: Autonomous and Encoders
ElapsedTime - OnBot Java
ElapsedTime Setup
ElapsedTime Logic
ElapsedTime - Multiple Movements
Encoder Basics
Drivetrain Encoders - OnBot Java
Converting Encoder Ticks to a Distance
Moving to a Target Distance
Setting Velocity
Turning the Drivetrain Using RUN_TO_POSITION
Arm Control with Encoders - OnBot Java
Estimating the Position of the Arm
Calculating Target Position
Using Limits to Control Range of Motion
Sensors
Introduction to Sensors
Digital
Analog
I2C
IMU
Orientating the IMU
Adding an External IMU to your Hub
Encoders
REV Motor Encoders
Through Bore Encoder
Using 3rd Party Sensors
Sensor Compatibility Chart
Useful Links
REV DUO Build System
Legacy Documentation
Configuring Your Android Devices
Expansion Hub with Android Device Robot Controller
Driver Station and Robot Controller Pairing
Wiring Diagram
Configuration
REV Hub Interface Software
Powered by GitBook
On this page
Setting Orientation in Code:
Blocks:
OnBot Java:
Recommended Orientations
Control Hubs with the Bosch BHI260AP IMU:
Control and Expansion Hubs with the Bosch BNO055 IMU:
Was this helpful?
Export as PDF
Setting Orientation in Code:
Blocks:
The IMU Blocks can be found under the Sensors dropdown menu:
IMU listings on a Control Hub with a BNO055
There are a few different ways to define the Hub's orientation. The easiest is by using the REV Robotics logo and USB ports to signify orientation:
This Control Hub is flat with the logo up and USBs pointed towards the front of the robot.
However, if the Hub is not flat you may also define its location using an orientation perimeter block:
This method uses a perimeter object to specify the Hub's arbitrary orientation on the robot by describing the rotation that would need to be applied in order to rotate the Hub from its default to the actual orientation. A similar method using a Quaternion block is also available.
The default position assumes the logo is UP and USBs are FORWARD.
OnBot Java:
During the initialization process the following can be used to define the Hub's orientation:
Copy
RevHubOrientationOnRobot.LogoFacingDirection logoDirection = RevHubOrientationOnRobot.LogoFacingDirection.UP;
RevHubOrientationOnRobot.UsbFacingDirection  usbDirection  = RevHubOrientationOnRobot.UsbFacingDirection.FORWARD;
RevHubOrientationOnRobot orientationOnRobot = new RevHubOrientationOnRobot(logoDirection, usbDirection);
imu.initialize(new IMU.Parameters(orientationOnRobot));
This method sets the orientation based on the position of the REV Robotics and USBs while the Hub is sitting flat orthogonally.
It is also possible to define the orientation of a Hub in a nonorthogonal position by setting rotations along the X, Y, and Z axes. For more information on this process, please see the "SensorIMUNonOrthogonal" sample available in OnBot Java as part of the FTC SDK.
Recommended Orientations
Control Hubs with the Bosch BHI260AP IMU:
For the most accurate readings from the Bosch BHI260AP IMU, it is recommended to have the Control Hub mounted flat on a horizontal plane.
Control and Expansion Hubs with the Bosch BNO055 IMU:
For the most accurate readings from the Bosch BNO055 IMU, it is recommend to have the Hub mounted flat on a horizontal OR vertical plane.
Previous
IMU
Next
Adding an External IMU to your Hub
Last updated
1 year ago
Was this helpful?