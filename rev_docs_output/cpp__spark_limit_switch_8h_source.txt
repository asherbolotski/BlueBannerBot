REVLib - C++
SparkLimitSwitch.h
Go to the documentation of this file.
1
/*
2
* Copyright (c) 2018-2024 REV Robotics
3
*
4
* Redistribution and use in source and binary forms, with or without
5
* modification, are permitted provided that the following conditions are met:
6
*
7
* 1. Redistributions of source code must retain the above copyright notice,
8
*    this list of conditions and the following disclaimer.
9
* 2. Redistributions in binary form must reproduce the above copyright
10
*    notice, this list of conditions and the following disclaimer in the
11
*    documentation and/or other materials provided with the distribution.
12
* 3. Neither the name of REV Robotics nor the names of its
13
*    contributors may be used to endorse or promote products derived from
14
*    this software without specific prior written permission.
15
*
16
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
17
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
18
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
19
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
20
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
21
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
22
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
23
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
24
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
25
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
26
* POSSIBILITY OF SUCH DAMAGE.
27
*/
28
29
#pragma once
30
31
#ifdef _MSC_VER
32
// Disable deprecation warnings for this file when using VS compiler
33
#pragma warning(disable : 4996)
34
#endif
35
36
#ifdef __GNUC__
37
#pragma GCC diagnostic push
38
#pragma GCC diagnostic ignored "-Wdeprecated"
39
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
40
#endif
41
42
#include "
rev/REVLibError.h
"
43
44
namespace
rev::spark
{
45
46
class
SparkBase;
47
48
class
SparkLimitSwitch
{
49
// Friend to allow construction
50
friend
class
SparkBase
;
51
52
public
:
53
SparkLimitSwitch
(
SparkLimitSwitch
&&) =
default
;
54
SparkLimitSwitch
&
operator=
(
SparkLimitSwitch
&&) =
default
;
55
56
SparkLimitSwitch
(
const
SparkLimitSwitch
&) =
default
;
57
58
virtual
~SparkLimitSwitch
() {}
59
64
virtual
bool
Get
()
const
;
65
66
private
:
67
enum class
Direction { kForward = 0, kReverse = 1 };
68
69
SparkBase
* m_device;
70
Direction m_direction;
71
72
explicit
SparkLimitSwitch
(
SparkBase
& device, Direction direction);
73
};
74
75
}
// namespace rev::spark
76
77
#ifdef __GNUC__
78
#pragma GCC diagnostic pop
79
#endif
REVLibError.h
rev::spark::SparkBase
Definition:
SparkBase.h:58
rev::spark::SparkLimitSwitch
Definition:
SparkLimitSwitch.h:48
rev::spark::SparkLimitSwitch::operator=
SparkLimitSwitch & operator=(SparkLimitSwitch &&)=default
rev::spark::SparkLimitSwitch::SparkBase
friend class SparkBase
Definition:
SparkLimitSwitch.h:50
rev::spark::SparkLimitSwitch::SparkLimitSwitch
SparkLimitSwitch(const SparkLimitSwitch &)=default
rev::spark::SparkLimitSwitch::Get
virtual bool Get() const
Definition:
SparkLimitSwitch.cpp:59
rev::spark::SparkLimitSwitch::SparkLimitSwitch
SparkLimitSwitch(SparkLimitSwitch &&)=default
rev::spark::SparkLimitSwitch::~SparkLimitSwitch
virtual ~SparkLimitSwitch()
Definition:
SparkLimitSwitch.h:58
rev::spark
Definition:
SparkLowLevel.cpp:40
src
main
native
include
rev
SparkLimitSwitch.h
Generated by
1.9.2