REVLib - C++
AnalogSensorConfig.h
Go to the documentation of this file.
1
/*
2
* Copyright (c) 2024 REV Robotics
3
*
4
* Redistribution and use in source and binary forms, with or without
5
* modification, are permitted provided that the following conditions are met:
6
*
7
* 1. Redistributions of source code must retain the above copyright notice,
8
*    this list of conditions and the following disclaimer.
9
* 2. Redistributions in binary form must reproduce the above copyright
10
*    notice, this list of conditions and the following disclaimer in the
11
*    documentation and/or other materials provided with the distribution.
12
* 3. Neither the name of REV Robotics nor the names of its
13
*    contributors may be used to endorse or promote products derived from
14
*    this software without specific prior written permission.
15
*
16
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
17
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
18
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
19
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
20
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
21
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
22
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
23
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
24
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
25
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
26
* POSSIBILITY OF SUCH DAMAGE.
27
*/
28
29
#pragma once
30
31
#include "
rev/config/BaseConfig.h
"
32
33
namespace
rev::spark
{
34
35
class
AnalogSensorConfig
:
public
BaseConfig
{
36
public
:
37
AnalogSensorConfig
() =
default
;
38
~AnalogSensorConfig
()
override
=
default
;
39
40
AnalogSensorConfig
(
const
AnalogSensorConfig
&) =
delete
;
41
AnalogSensorConfig
&
operator=
(
const
AnalogSensorConfig
&) =
delete
;
42
AnalogSensorConfig
(
AnalogSensorConfig
&&) noexcept = delete;
43
AnalogSensorConfig
& operator=(
AnalogSensorConfig
&&) noexcept = delete;
44
54
AnalogSensorConfig
&
Apply
(
AnalogSensorConfig
& config);
55
64
AnalogSensorConfig
&
Inverted
(
bool
inverted);
65
75
AnalogSensorConfig
&
PositionConversionFactor
(
double
factor);
76
86
AnalogSensorConfig
&
VelocityConversionFactor
(
double
factor);
87
};
88
89
}
// namespace rev::spark
BaseConfig.h
rev::BaseConfig
Definition:
BaseConfig.h:40
rev::spark::AnalogSensorConfig
Definition:
AnalogSensorConfig.h:35
rev::spark::AnalogSensorConfig::AnalogSensorConfig
AnalogSensorConfig(AnalogSensorConfig &&) noexcept=delete
rev::spark::AnalogSensorConfig::VelocityConversionFactor
AnalogSensorConfig & VelocityConversionFactor(double factor)
Definition:
AnalogSensorConfig.cpp:52
rev::spark::AnalogSensorConfig::PositionConversionFactor
AnalogSensorConfig & PositionConversionFactor(double factor)
Definition:
AnalogSensorConfig.cpp:45
rev::spark::AnalogSensorConfig::AnalogSensorConfig
AnalogSensorConfig(const AnalogSensorConfig &)=delete
rev::spark::AnalogSensorConfig::AnalogSensorConfig
AnalogSensorConfig()=default
rev::spark::AnalogSensorConfig::operator=
AnalogSensorConfig & operator=(const AnalogSensorConfig &)=delete
rev::spark::AnalogSensorConfig::~AnalogSensorConfig
~AnalogSensorConfig() override=default
rev::spark::AnalogSensorConfig::Apply
AnalogSensorConfig & Apply(AnalogSensorConfig &config)
Definition:
AnalogSensorConfig.cpp:35
rev::spark::AnalogSensorConfig::Inverted
AnalogSensorConfig & Inverted(bool inverted)
Definition:
AnalogSensorConfig.cpp:40
rev::spark
Definition:
SparkLowLevel.cpp:40
src
main
native
include
rev
config
AnalogSensorConfig.h
Generated by
1.9.2