JavaScript is disabled on your browser.
Package
com.revrobotics.spark
Class SparkClosedLoopController
java.lang.Object
com.revrobotics.spark.SparkClosedLoopController
public class
SparkClosedLoopController
extends
Object
Get an instance of this class by using
SparkBase.getClosedLoopController()
.
Nested Class Summary
Nested Classes
Modifier and Type
Class
Description
static enum
SparkClosedLoopController.ArbFFUnits
Method Summary
All Methods
Instance Methods
Concrete Methods
Deprecated Methods
Modifier and Type
Method
Description
SparkBase.ControlType
getControlType
()
Get the selected control type used when
setReference(double, SparkBase.ControlType)
was last called.
double
getIAccum
()
Get the I accumulator of the closed loop controller.
double
getMAXMotionSetpointPosition
()
Get the MAXMotion internal setpoint position.
double
getMAXMotionSetpointVelocity
()
Get the MAXMotion internal setpoint velocity.
ClosedLoopSlot
getSelectedSlot
()
Get the selected closed loop PID slot.
double
getSetpoint
()
Get the internal setpoint of the closed loop controller.
boolean
isAtSetpoint
()
Determine if the setpoint has been reached.
REVLibError
setIAccum
(double iAccum)
Set the I accumulator of the closed loop controller.
REVLibError
setReference
(double setpoint,
SparkBase.ControlType
ctrl)
Deprecated, for removal: This API element is subject to removal in a future version.
Use
setSetpoint(double, SparkBase.ControlType)
instead
REVLibError
setReference
(double setpoint,
SparkBase.ControlType
ctrl,
ClosedLoopSlot
slot)
Deprecated, for removal: This API element is subject to removal in a future version.
Use
setSetpoint(double, SparkBase.ControlType, ClosedLoopSlot)
instead
REVLibError
setReference
(double setpoint,
SparkBase.ControlType
ctrl,
ClosedLoopSlot
slot,
 double arbFeedforward)
Deprecated, for removal: This API element is subject to removal in a future version.
Use
setSetpoint(double, SparkBase.ControlType, ClosedLoopSlot, double)
instead
REVLibError
setReference
(double setpoint,
SparkBase.ControlType
ctrl,
ClosedLoopSlot
slot,
 double arbFeedforward,
SparkClosedLoopController.ArbFFUnits
arbFFUnits)
Deprecated, for removal: This API element is subject to removal in a future version.
Use
setSetpoint(double, SparkBase.ControlType, ClosedLoopSlot, double, ArbFFUnits)
instead
REVLibError
setSetpoint
(double setpoint,
SparkBase.ControlType
ctrl)
Set the controller setpoint based on the selected control mode.
REVLibError
setSetpoint
(double setpoint,
SparkBase.ControlType
ctrl,
ClosedLoopSlot
slot)
Set the controller setpoint based on the selected control mode.
REVLibError
setSetpoint
(double setpoint,
SparkBase.ControlType
ctrl,
ClosedLoopSlot
slot,
 double arbFeedforward)
Set the controller setpoint based on the selected control mode.
REVLibError
setSetpoint
(double setpoint,
SparkBase.ControlType
ctrl,
ClosedLoopSlot
slot,
 double arbFeedforward,
SparkClosedLoopController.ArbFFUnits
arbFFUnits)
Set the controller setpoint based on the selected control mode.
Methods inherited from class java.lang.
Object
clone
,
equals
,
finalize
,
getClass
,
hashCode
,
notify
,
notifyAll
,
toString
,
wait
,
wait
,
wait
Method Details
setSetpoint
public
REVLibError
setSetpoint
(double setpoint,
SparkBase.ControlType
ctrl)
Set the controller setpoint based on the selected control mode.
Parameters:
setpoint
- The setpoint to set depending on the control mode. For basic duty cycle control
     this should be a value between -1 and 1 Otherwise: Voltage Control: Voltage (volts)
     Velocity Control: Velocity (RPM) Position Control: Position (Rotations) Current Control:
     Current (Amps). Native units can be changed using
AlternateEncoderConfig.positionConversionFactor(double)
, or
ExternalEncoderConfig.positionConversionFactor(double)
, or
EncoderConfig.positionConversionFactor(double)
or
AlternateEncoderConfig.velocityConversionFactor(double)
, or
ExternalEncoderConfig.velocityConversionFactor(double)
, or
EncoderConfig.velocityConversionFactor(double)
ctrl
- the control type
Returns:
REVLibError.kOk
if successful
setSetpoint
public
REVLibError
setSetpoint
(double setpoint,
SparkBase.ControlType
ctrl,
ClosedLoopSlot
slot)
Set the controller setpoint based on the selected control mode. This will override the
 pre-programmed control mode but not change what is programmed to the controller.
Parameters:
setpoint
- The setpoint to set depending on the control mode. For basic duty cycle control
     this should be a value between -1 and 1 Otherwise: Voltage Control: Voltage (volts)
     Velocity Control: Velocity (RPM) Position Control: Position (Rotations) Current Control:
     Current (Amps). Native units can be changed using
AlternateEncoderConfig.positionConversionFactor(double)
, or
ExternalEncoderConfig.positionConversionFactor(double)
, or
EncoderConfig.positionConversionFactor(double)
or
AlternateEncoderConfig.velocityConversionFactor(double)
, or
ExternalEncoderConfig.velocityConversionFactor(double)
, or
EncoderConfig.velocityConversionFactor(double)
ctrl
- Is the control type to override with
slot
- The
ClosedLoopSlot
to use
Returns:
REVLibError.kOk
if successful
setSetpoint
public
REVLibError
setSetpoint
(double setpoint,
SparkBase.ControlType
ctrl,
ClosedLoopSlot
slot,
 double arbFeedforward)
Set the controller setpoint based on the selected control mode. This will override the
 pre-programmed control mode but not change what is programmed to the controller.
Parameters:
setpoint
- The setpoint to set depending on the control mode. For basic duty cycle control
     this should be a value between -1 and 1 Otherwise: Voltage Control: Voltage (volts)
     Velocity Control: Velocity (RPM) Position Control: Position (Rotations) Current Control:
     Current (Amps). Native units can be changed using
AlternateEncoderConfig.positionConversionFactor(double)
, or
ExternalEncoderConfig.positionConversionFactor(double)
, or
EncoderConfig.positionConversionFactor(double)
or
AlternateEncoderConfig.velocityConversionFactor(double)
, or
ExternalEncoderConfig.velocityConversionFactor(double)
, or
EncoderConfig.velocityConversionFactor(double)
ctrl
- Is the control type to override with
slot
- The
ClosedLoopSlot
to use
arbFeedforward
- A value from which is represented in voltage applied to the motor after
     the result of the specified control mode. The units for the parameter is Volts. This value
     is set after the control mode, but before any current limits or ramp rates.
Returns:
REVLibError.kOk
if successful
setSetpoint
public
REVLibError
setSetpoint
(double setpoint,
SparkBase.ControlType
ctrl,
ClosedLoopSlot
slot,
 double arbFeedforward,
SparkClosedLoopController.ArbFFUnits
arbFFUnits)
Set the controller setpoint based on the selected control mode. This will override the
 pre-programmed control mode but not change what is programmed to the controller.
Parameters:
setpoint
- The setpoint to set depending on the control mode. For basic duty cycle control
     this should be a value between -1 and 1 Otherwise: Voltage Control: Voltage (volts)
     Velocity Control: Velocity (RPM) Position Control: Position (Rotations) Current Control:
     Current (Amps). Native units can be changed using
AlternateEncoderConfig.positionConversionFactor(double)
, or
ExternalEncoderConfig.positionConversionFactor(double)
, or
EncoderConfig.positionConversionFactor(double)
or
AlternateEncoderConfig.velocityConversionFactor(double)
, or
ExternalEncoderConfig.velocityConversionFactor(double)
, or
EncoderConfig.velocityConversionFactor(double)
ctrl
- Is the control type to override with
slot
- The
ClosedLoopSlot
to use
arbFeedforward
- A value from which is represented in voltage applied to the motor after
     the result of the specified control mode. The units for the parameter is Volts. This value
     is set after the control mode, but before any current limits or ramp rates.
arbFFUnits
- The units the arbitrary feed forward term is in
Returns:
REVLibError.kOk
if successful
setReference
@Deprecated
(
forRemoval
=true)
public
REVLibError
setReference
(double setpoint,
SparkBase.ControlType
ctrl)
Deprecated, for removal: This API element is subject to removal in a future version.
Use
setSetpoint(double, SparkBase.ControlType)
instead
Set the controller setpoint based on the selected control mode.
Parameters:
setpoint
- The setpoint to set depending on the control mode. For basic duty cycle control
     this should be a value between -1 and 1 Otherwise: Voltage Control: Voltage (volts)
     Velocity Control: Velocity (RPM) Position Control: Position (Rotations) Current Control:
     Current (Amps). Native units can be changed using
AlternateEncoderConfig.positionConversionFactor(double)
, or
ExternalEncoderConfig.positionConversionFactor(double)
, or
EncoderConfig.positionConversionFactor(double)
or
AlternateEncoderConfig.velocityConversionFactor(double)
, or
ExternalEncoderConfig.velocityConversionFactor(double)
, or
EncoderConfig.velocityConversionFactor(double)
ctrl
- the control type
Returns:
REVLibError.kOk
if successful
setReference
@Deprecated
(
forRemoval
=true)
public
REVLibError
setReference
(double setpoint,
SparkBase.ControlType
ctrl,
ClosedLoopSlot
slot)
Deprecated, for removal: This API element is subject to removal in a future version.
Use
setSetpoint(double, SparkBase.ControlType, ClosedLoopSlot)
instead
Set the controller setpoint based on the selected control mode. This will override the
 pre-programmed control mode but not change what is programmed to the controller.
Parameters:
setpoint
- The setpoint to set depending on the control mode. For basic duty cycle control
     this should be a value between -1 and 1 Otherwise: Voltage Control: Voltage (volts)
     Velocity Control: Velocity (RPM) Position Control: Position (Rotations) Current Control:
     Current (Amps). Native units can be changed using
AlternateEncoderConfig.positionConversionFactor(double)
, or
ExternalEncoderConfig.positionConversionFactor(double)
, or
EncoderConfig.positionConversionFactor(double)
or
AlternateEncoderConfig.velocityConversionFactor(double)
, or
ExternalEncoderConfig.velocityConversionFactor(double)
, or
EncoderConfig.velocityConversionFactor(double)
ctrl
- Is the control type to override with
slot
- The
ClosedLoopSlot
to use
Returns:
REVLibError.kOk
if successful
setReference
@Deprecated
(
forRemoval
=true)
public
REVLibError
setReference
(double setpoint,
SparkBase.ControlType
ctrl,
ClosedLoopSlot
slot,
 double arbFeedforward)
Deprecated, for removal: This API element is subject to removal in a future version.
Use
setSetpoint(double, SparkBase.ControlType, ClosedLoopSlot, double)
instead
Set the controller setpoint based on the selected control mode. This will override the
 pre-programmed control mode but not change what is programmed to the controller.
Parameters:
setpoint
- The setpoint to set depending on the control mode. For basic duty cycle control
     this should be a value between -1 and 1 Otherwise: Voltage Control: Voltage (volts)
     Velocity Control: Velocity (RPM) Position Control: Position (Rotations) Current Control:
     Current (Amps). Native units can be changed using
AlternateEncoderConfig.positionConversionFactor(double)
, or
ExternalEncoderConfig.positionConversionFactor(double)
, or
EncoderConfig.positionConversionFactor(double)
or
AlternateEncoderConfig.velocityConversionFactor(double)
, or
ExternalEncoderConfig.velocityConversionFactor(double)
, or
EncoderConfig.velocityConversionFactor(double)
ctrl
- Is the control type to override with
slot
- The
ClosedLoopSlot
to use
arbFeedforward
- A value from which is represented in voltage applied to the motor after
     the result of the specified control mode. The units for the parameter is Volts. This value
     is set after the control mode, but before any current limits or ramp rates.
Returns:
REVLibError.kOk
if successful
setReference
@Deprecated
(
forRemoval
=true)
public
REVLibError
setReference
(double setpoint,
SparkBase.ControlType
ctrl,
ClosedLoopSlot
slot,
 double arbFeedforward,
SparkClosedLoopController.ArbFFUnits
arbFFUnits)
Deprecated, for removal: This API element is subject to removal in a future version.
Use
setSetpoint(double, SparkBase.ControlType, ClosedLoopSlot, double, ArbFFUnits)
instead
Set the controller setpoint based on the selected control mode. This will override the
 pre-programmed control mode but not change what is programmed to the controller.
Parameters:
setpoint
- The setpoint to set depending on the control mode. For basic duty cycle control
     this should be a value between -1 and 1 Otherwise: Voltage Control: Voltage (volts)
     Velocity Control: Velocity (RPM) Position Control: Position (Rotations) Current Control:
     Current (Amps). Native units can be changed using
AlternateEncoderConfig.positionConversionFactor(double)
, or
ExternalEncoderConfig.positionConversionFactor(double)
, or
EncoderConfig.positionConversionFactor(double)
or
AlternateEncoderConfig.velocityConversionFactor(double)
, or
ExternalEncoderConfig.velocityConversionFactor(double)
, or
EncoderConfig.velocityConversionFactor(double)
ctrl
- Is the control type to override with
slot
- The
ClosedLoopSlot
to use
arbFeedforward
- A value from which is represented in voltage applied to the motor after
     the result of the specified control mode. The units for the parameter is Volts. This value
     is set after the control mode, but before any current limits or ramp rates.
arbFFUnits
- The units the arbitrary feed forward term is in
Returns:
REVLibError.kOk
if successful
getControlType
public
SparkBase.ControlType
getControlType
()
Get the selected control type used when
setReference(double, SparkBase.ControlType)
was last called.
Returns:
The selected control type
setIAccum
public
REVLibError
setIAccum
(double iAccum)
Set the I accumulator of the closed loop controller. This is useful when wishing to force a
 reset on the I accumulator of the closed loop controller. You can also preset values to see how
 it will respond to certain I characteristics
To use this function, the controller must be in a closed loop control mode by calling
 setReference()
Parameters:
iAccum
- The value to set the I accumulator to
Returns:
REVLibError.kOk
if successful
getIAccum
public
double
getIAccum
()
Get the I accumulator of the closed loop controller. This is useful when wishing to see what
 the I accumulator value is to help with PID tuning
Returns:
The value of the I accumulator
getSetpoint
public
double
getSetpoint
()
Get the internal setpoint of the closed loop controller.
Returns:
The internal setpoint
isAtSetpoint
public
boolean
isAtSetpoint
()
Determine if the setpoint has been reached.
Returns:
true if the setpoint is reached; false otherwise
getSelectedSlot
public
ClosedLoopSlot
getSelectedSlot
()
Get the selected closed loop PID slot.
Returns:
The selected closed loop PID slot
getMAXMotionSetpointPosition
public
double
getMAXMotionSetpointPosition
()
Get the MAXMotion internal setpoint position.
This will be 0 if the controller is not in a MAXMotion control mode.
Returns:
The MAXMotion internal setpoint position in rotations or units specified by the
     conversion factor.
getMAXMotionSetpointVelocity
public
double
getMAXMotionSetpointVelocity
()
Get the MAXMotion internal setpoint velocity.
This will be 0 if the controller is not in a MAXMotion control mode.
Returns:
The MAXMotion internal setpoint velocity in rotations per minute or units specified by
     the conversion factor.