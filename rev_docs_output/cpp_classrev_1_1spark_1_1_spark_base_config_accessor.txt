REVLib - C++
Public Member Functions
|
Public Attributes
|
Protected Member Functions
|
List of all members
rev::spark::SparkBaseConfigAccessor Class Reference
#include <
SparkBaseConfigAccessor.h
>
Inherited by
rev::spark::SparkFlexConfigAccessor
, and
rev::spark::SparkMaxConfigAccessor
.
Public Member Functions
SparkBaseConfig::IdleMode
GetIdleMode
()
bool
GetInverted
()
int
GetSmartCurrentLimit
()
int
GetSmartCurrentFreeLimit
()
int
GetSmartCurrentRPMLimit
()
double
GetSecondaryCurrentLimit
()
int
GetSecondaryCurrentLimitChopCycles
()
double
GetOpenLoopRampRate
()
double
GetClosedLoopRampRate
()
double
GetVoltageCompensation
()
bool
GetVoltageCompensationEnabled
()
int
GetFollowerModeLeaderId
()
bool
GetFollowerModeInverted
()
Public Attributes
AbsoluteEncoderConfigAccessor
absoluteEncoder
AnalogSensorConfigAccessor
analogSensor
ClosedLoopConfigAccessor
closedLoop
EncoderConfigAccessor
encoder
LimitSwitchConfigAccessor
limitSwitch
SignalsConfigAccessor
signals
SoftLimitConfigAccessor
softLimit
Protected Member Functions
SparkBaseConfigAccessor
(void *sparkHandle)
Constructor & Destructor Documentation
◆
SparkBaseConfigAccessor()
SparkBaseConfigAccessor::SparkBaseConfigAccessor
(
void *
sparkHandle
)
explicit
protected
Member Function Documentation
◆
GetIdleMode()
SparkBaseConfig::IdleMode
SparkBaseConfigAccessor::GetIdleMode
(
)
◆
GetInverted()
bool SparkBaseConfigAccessor::GetInverted
(
)
◆
GetSmartCurrentLimit()
int SparkBaseConfigAccessor::GetSmartCurrentLimit
(
)
◆
GetSmartCurrentFreeLimit()
int SparkBaseConfigAccessor::GetSmartCurrentFreeLimit
(
)
◆
GetSmartCurrentRPMLimit()
int SparkBaseConfigAccessor::GetSmartCurrentRPMLimit
(
)
◆
GetSecondaryCurrentLimit()
double SparkBaseConfigAccessor::GetSecondaryCurrentLimit
(
)
◆
GetSecondaryCurrentLimitChopCycles()
int SparkBaseConfigAccessor::GetSecondaryCurrentLimitChopCycles
(
)
◆
GetOpenLoopRampRate()
double SparkBaseConfigAccessor::GetOpenLoopRampRate
(
)
◆
GetClosedLoopRampRate()
double SparkBaseConfigAccessor::GetClosedLoopRampRate
(
)
◆
GetVoltageCompensation()
double SparkBaseConfigAccessor::GetVoltageCompensation
(
)
◆
GetVoltageCompensationEnabled()
bool SparkBaseConfigAccessor::GetVoltageCompensationEnabled
(
)
◆
GetFollowerModeLeaderId()
int SparkBaseConfigAccessor::GetFollowerModeLeaderId
(
)
◆
GetFollowerModeInverted()
bool SparkBaseConfigAccessor::GetFollowerModeInverted
(
)
Member Data Documentation
◆
absoluteEncoder
AbsoluteEncoderConfigAccessor
rev::spark::SparkBaseConfigAccessor::absoluteEncoder
Accessor for parameters relating to the absolute encoder. To configure these values, use
AbsoluteEncoderConfig
and call
SparkBase::Configure
.
NOTE: This uses calls that are blocking to retrieve parameters and should be used infrequently.
◆
analogSensor
AnalogSensorConfigAccessor
rev::spark::SparkBaseConfigAccessor::analogSensor
Accessor for parameters relating to the analog sensor. To configure these values, use
AnalogSensorConfig
and call
SparkBase::Configure
.
NOTE: This uses calls that are blocking to retrieve parameters and should be used infrequently.
◆
closedLoop
ClosedLoopConfigAccessor
rev::spark::SparkBaseConfigAccessor::closedLoop
Accessor for parameters relating to the closed loop controller. To configure these values, use
ClosedLoopConfig
and call
SparkBase::Configure
.
NOTE: This uses calls that are blocking to retrieve parameters and should be used infrequently.
◆
encoder
EncoderConfigAccessor
rev::spark::SparkBaseConfigAccessor::encoder
Accessor for parameters relating to the primary encoder. To configure these values, use
EncoderConfig
and call
SparkBase::Configure
.
NOTE: This uses calls that are blocking to retrieve parameters and should be used infrequently.
◆
limitSwitch
LimitSwitchConfigAccessor
rev::spark::SparkBaseConfigAccessor::limitSwitch
Accessor for parameters relating to the hardware limit switches. To configure these values, use
LimitSwitchConfig
and call
SparkBase::Configure
.
NOTE: This uses calls that are blocking to retrieve parameters and should be used infrequently.
◆
signals
SignalsConfigAccessor
rev::spark::SparkBaseConfigAccessor::signals
Accessor for parameters relating to status signals. To configure these values, use
SignalsConfig
and call
SparkBase::Configure
.
NOTE: This uses calls that are blocking to retrieve parameters and should be used infrequently.
◆
softLimit
SoftLimitConfigAccessor
rev::spark::SparkBaseConfigAccessor::softLimit
Accessor for parameters relating to the software limits. To configure these values, use
SoftLimitConfig
and call
SparkBase::Configure
.
NOTE: This uses calls that are blocking to retrieve parameters and should be used infrequently.
The documentation for this class was generated from the following files:
src/main/native/include/rev/config/
SparkBaseConfigAccessor.h
src/main/native/cpp/config/
SparkBaseConfigAccessor.cpp
rev
spark
SparkBaseConfigAccessor
Generated by
1.9.2